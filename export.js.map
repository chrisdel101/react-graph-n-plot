{"version":3,"file":"export.js","sources":["src/utils/graph_utils.js","src/utils/styles.js","src/components/Cell.jsx","src/components/Point.jsx","src/components/Graph.jsx"],"sourcesContent":["var utils = (function() {\n  return {\n    _convertToPixels: function(x, y) {\n      if (!x) {\n        x = 0\n      }\n      if (!y) {\n        y = 0\n      }\n      let totalX\n      let totalY\n      if (x) {\n        x = x - 10\n        totalX = 100 + x * 11\n      } else {\n        totalX = x * 10\n      }\n      if (y) {\n        y = y - 10\n        totalY = 100 + y * 11\n      } else {\n        totalY = y * 10\n      }\n      let moveX = parseInt(totalX)\n      let moveY = parseInt(totalY)\n      let coordsObj = {\n        moveX: moveX,\n        moveY: moveY\n      }\n      return coordsObj\n    },\n    _numToMove: function(x, y, type) {\n      if (type === 'stop') {\n        let moveX = Math.abs(this.state.previousStopX - x)\n        let moveY = Math.abs(this.state.previousStopY - y)\n        return {\n          tempX: moveX,\n          tempY: moveY\n        }\n      } else if (type === 'leg') {\n        let moveX = Math.abs(this.state.previousLegX - x)\n        let moveY = Math.abs(this.state.previousLegY - y)\n        return {\n          tempX: moveX,\n          tempY: moveY\n        }\n      } else {\n        console.error('error in the num to move function')\n      }\n    },\n    _calcStartingCell: function(sizeObj) {\n      // find the corner cell formula is (x * y) - x\n      let startingCellNum =\n        parseInt(sizeObj.x) * parseInt(sizeObj.y) - parseInt(sizeObj.x)\n      return startingCellNum\n    },\n    // takes 2 objs of coords and determines the diff\n    _absDiff: function(firstCoordsObj, secondCoordsObj) {\n      let xDiff = Math.abs(firstCoordsObj.x - secondCoordsObj.x)\n      let yDiff = Math.abs(firstCoordsObj.y - secondCoordsObj.y)\n      return {\n        xDiff,\n        yDiff\n      }\n    },\n    _getDriverCoords: function(firstLegStopObj, lastLegStopObj, numToMoveObj) {\n      let x1 = firstLegStopObj.x\n      let x2 = lastLegStopObj.x\n      let y1 = firstLegStopObj.y\n      let y2 = lastLegStopObj.y\n      let xNum = numToMoveObj.xNum\n      let yNum = numToMoveObj.yNum\n      // if x moves up, add\n      let xToMove\n      let yToMove\n      if (x1 < x2) {\n        xToMove = x1 + xNum\n      } else if (x1 >= x2) {\n        xToMove = x1 - xNum\n      } else {\n        console.error('error in driver movement')\n      }\n      if (y1 < y2) {\n        yToMove = y1 + yNum\n      } else if (y1 >= y2) {\n        yToMove = y1 - yNum\n      } else {\n        console.error('error in driver movement')\n      }\n      return {\n        x: xToMove,\n        y: yToMove\n      }\n    },\n    // take amount in leg with a percent - returns num to move out of total leg number\n    _percentToCoords: function(diffObj, percent) {\n      let xNum = Math.floor(diffObj.xDiff * 0.01 * percent)\n      let yNum = Math.floor(diffObj.yDiff * 0.01 * percent)\n      return { xNum, yNum }\n    },\n    // takes first stop obj, driver coords obj, and abs diff of a single stops axis\n    _findPercentFromDriverCoords(firstStop, driverCoords, yAbsDiff, xAbsDiff) {\n      let x1 = parseInt(firstStop.x)\n      let y1 = parseInt(firstStop.y)\n      let x2 = parseInt(driverCoords.x)\n      let y2 = parseInt(driverCoords.y)\n\n      let xDiff\n      let yDiff\n\n      // find number moved from last stop\n      if (x1 < x2) {\n        xDiff = x2 - x1\n      } else if (x1 > x2) {\n        xDiff = x1 - x2\n      } else if (x1 === x2) {\n        xDiff = 0\n      } else {\n        console.error('error in driver movement')\n      }\n      if (y1 < y2) {\n        yDiff = y2 - y1\n      } else if (y1 > y2) {\n        yDiff = y1 - y2\n      } else if (y1 === y2) {\n        yDiff = 0\n      } else {\n        console.error('error in driver movement')\n      }\n\n      // divide number moved so far in leg by total number in leg\n      let xPercent\n      let yPercent\n      // check for zero vals\n      if (xDiff === 0) {\n        xPercent = 0\n      }\n      if (yDiff === 0) {\n        yPercent = 0\n      }\n      if (xDiff && xDiff !== 0) {\n        xPercent = xDiff / xAbsDiff\n      }\n      if (yDiff && yDiff !== 0) {\n        yPercent = yDiff / yAbsDiff\n      }\n      // let finalPercent\n\n      // if one val is missing use the other alone\n      if (!xPercent || !yPercent) {\n        if (xPercent) {\n          return xPercent * 100\n        } else if (yPercent) {\n          return yPercent * 100\n        }\n      }\n      // it both are zero then zero percent\n      if (xPercent === 0 && yPercent === 0) {\n        return 0\n      }\n\n      // use the larger leg to updaet val - TODO: make both percents equal so driver fits back into grid\n      if (xAbsDiff > yAbsDiff) {\n        return xPercent\n      } else if (xAbsDiff < yAbsDiff) {\n        return yPercent\n        // if equal use the larger percent\n      } else if (xAbsDiff === yAbsDiff) {\n        if (xPercent >= yPercent) {\n          return xPercent\n        } else {\n          return yPercent\n        }\n      } else {\n        console.error('An error occured in the percentage calcs')\n      }\n    },\n    // make json from the entered plot points\n    _makePlotJson(plotsArr) {\n      return plotsArr.map((coords, i) => {\n        return {\n          name: String.fromCharCode(i + 65),\n          x: coords.x,\n          y: coords.y\n        }\n      })\n    },\n    _toggleState(currentState) {\n      if (!currentState) {\n        return true\n      } else {\n        return false\n      }\n    },\n    _Cell(cellNum, color) {\n      this.cellNum = cellNum\n      this.color = color\n    },\n    _makePLotCellObj(cellNum, color, CellFunc) {\n      return new CellFunc(cellNum, color)\n    },\n    _arrOfObjsToArr(arrOfObjs, property) {\n      return arrOfObjs.map(obj => {\n        return obj[property]\n      })\n    }\n  }\n})()\n\nexport default utils\n","const gridStyles = function(props) {\n  return {\n    graphContainer: {\n      display: 'flex',\n      position: 'relative',\n      bottom: '0px'\n    },\n    graph: {\n      display: 'grid',\n      border: '1px solid black',\n      gridGap: '1px',\n      backgroundColor: 'black',\n      gridTemplateRows: `repeat(${props.setGraphSize.y}, 10px)`,\n      gridTemplateColumns: `repeat(${props.setGraphSize.x}, 10px)`\n    }\n  }\n}\nconst cellStyles = {\n  cell: {\n    width: '100%',\n    height: '100%',\n    backgroundColor: '#fff'\n  }\n}\nconst pointStyles = {\n  'point-marker:before': {\n    content: \"'●'\",\n    'font-size': '10px'\n  },\n  'point-marker': {\n    position: 'absolute',\n    bottom: '0px'\n  }\n}\nconst bodyStyles = {\n  body: {\n    margin: 0,\n    fontFamily:\n      '-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif',\n    WebkitFontSmoothing: 'antialiased',\n    MozOsxFontSmoothing: 'grayscale'\n  }\n}\nmodule.exports = {\n  bodyStyles,\n  cellStyles,\n  gridStyles,\n  pointStyles\n}\n","import utils from '../utils/graph_utils'\nimport React from 'react'\nimport styles from '../utils/styles'\nimport PropTypes from 'prop-types'\n\nclass Cell extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      allColored: false\n    }\n    this.CellMarkup = this.CellMarkup.bind(this)\n  }\n  renderCells(i) {\n    if (this.props.toRender) {\n      const { toRender } = this.props\n      return toRender.map((obj, i) => {\n        let result\n        switch (this.props.type) {\n          case 'all':\n            result = this.allColorsAddLogic(i)\n            break\n          default:\n            // on first render just run markup\n            result = <this.CellMarkup key={i} id={i} />\n            break\n        }\n        return result\n      })\n    }\n  }\n  allColorsAddLogic(i) {\n    let { allColorCellObj } = this.props\n    // key object key with i\n    return <this.CellMarkup key={i} id={i} color={allColorCellObj[i]} />\n  }\n  addColor(cellObj) {\n    if (cellObj) {\n      return {\n        backgroundColor: cellObj.color\n      }\n    } else {\n      return styles.cellStyles.cell\n    }\n  }\n  CellMarkup(input) {\n    let idStr = `id${input.id}`\n    return (\n      <div\n        style={this.addColor(input.color)}\n        id={idStr}\n        key={input.id}\n        className='cell'\n      />\n    )\n  }\n\n  render() {\n    if (this.props.toRender && this.props.toRender.length) {\n      return <React.Fragment>{this.renderCells()}</React.Fragment>\n    } else {\n      return <div>No Cells yet!</div>\n    }\n  }\n}\nCell.propTypes = {\n  allColorCellObj: PropTypes.object,\n  toRender: PropTypes.array,\n  type: PropTypes.string\n}\nexport default Cell\n","import React from 'react'\nimport styles from '../utils/styles'\n\n// takes and array of directions and pixes for x and y\nfunction Point(props) {\n  if (!props.coordsArrs) return null\n\n  // make string with the pseudo selector to add point icon\n  function injectIntoHead() {\n    let output = ''\n    const stylesArr = Object.keys(styles.pointStyles)\n    for (let i = 0; i < stylesArr.length; i++) {\n      const j = Object.keys(styles.pointStyles[stylesArr[i]])\n      const k = Object.values(styles.pointStyles[stylesArr[i]])\n\n      output += `.${stylesArr[i]}\\n {`\n      for (let a = 0; a < j.length; a++) {\n        output += ` ${j[a]}: ${k[a]}; `\n      }\n      output += '}\\n\\n'\n    }\n    let styleTag = document.createElement('style')\n    styleTag.type = 'text/css'\n    let node = document.createTextNode(output)\n    styleTag.append(node)\n    let head = document.querySelector('head')\n    head.appendChild(styleTag)\n  }\n  injectIntoHead()\n\n  let display\n  !props.color ? (display = 'none') : (display = 'block')\n  return props.coordsArrs.map((coord, i) => {\n    let styles = {\n      display: display,\n      color: props.color,\n      [coord.directions.xDir]: coord.pixels.moveX.toString() + 'px',\n      [coord.directions.yDir]: coord.pixels.moveY.toString() + 'px'\n    }\n    return <div className='point-marker' style={styles} key={i} />\n  })\n}\n\nexport default Point\n","import React, { Component } from 'react'\nimport Cell from './Cell.jsx'\nimport Point from './Point.jsx'\nimport utils from '../utils/graph_utils'\nimport gridStyles from '../utils/styles'\nimport PropTypes from 'prop-types'\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      stopsDirsArr: [],\n      allColorsCounter: 0,\n      colorType: '',\n      plotSets: [],\n      gridSets: [],\n      startingCellNumAll: 0,\n      previousStopX: 0,\n      previousStopY: 0,\n      boxesToRender: Array.from({ length: 100 }, (v, i) => i),\n      finalStopColorCellObj: {},\n      finalStopColorCellArr: []\n    }\n  }\n  componentDidMount() {\n    this.createGraph()\n    this.loadPlotDatatoPlotSets()\n    this.loadGridDataintoGridSets()\n  }\n  // make props coords into useable json\n  loadPlotDatatoPlotSets(type) {\n    // load plotsets into state\n    Object.values(this.props.plotSets).forEach(set => {\n      // update with _makePlotJson func\n      set.plots = utils._makePlotJson(set.plots)\n      this.setState(prevState => ({\n        plotSets: [...prevState.plotSets, set]\n      }))\n    })\n  }\n  // set state after color grid runs through a set\n  resetColorGridState() {\n    this.setState({\n      startingCellNumAll: utils._calcStartingCell(this.props.setGraphSize),\n      previousStopX: 0,\n      previousStopY: 0\n    })\n    this.calcRowVariaion()\n  }\n  // use plot json to set stops and make colored grid\n  loadGridDataintoGridSets() {\n    setTimeout(() => {\n      // loop over each obj\n      for (let key in this.state.plotSets) {\n        const plotsArr = this.state.plotSets[key].plots\n        const { lineColor } = this.state.plotSets[key]\n        // get the array inside and set stops\n        this._setStopCoords('stop', plotsArr)\n        const tempGridSet = {\n          gridColorDataObjs: [],\n          gridColorDataObj: {},\n          name: `set${key}`,\n          allColorsCounter: this.state.allColorsCounter,\n          colorType: 'all'\n        }\n        plotsArr.forEach((stop, i) => {\n          const { tempCellNumsArr, tempCellNumsObj } = this.colorGrid(\n            stop.x,\n            stop.y,\n            'all',\n            lineColor,\n            tempGridSet.gridColorDataObj\n          )\n          tempGridSet.gridColorDataObjs = [\n            ...tempGridSet.gridColorDataObjs,\n            ...tempCellNumsArr\n          ]\n          tempGridSet.gridColorDataObj = {\n            ...tempGridSet.gridColorDataObj,\n            ...tempCellNumsObj\n          }\n        })\n        this.setState(prevState => ({\n          gridSets: [...prevState.gridSets, tempGridSet]\n        }))\n        this.resetColorGridState()\n      }\n      this.setState({\n        finalStopColorCellArr: this.makeSingleCellNumArr(),\n        finalStopColorCellObj: this.makeSingleCellNumObj()\n      })\n    })\n  }\n  // combine all color cells into one array\n  makeSingleCellNumArr() {\n    const arr = this.state.gridSets\n      .map(obj => {\n        return obj.gridColorDataObjs\n      })\n      .flat()\n    return arr\n  }\n  // spread all objs into one big one for lookup\n  makeSingleCellNumObj() {\n    let allObjs = {}\n    this.state.gridSets.forEach(obj => {\n      allObjs = { ...allObjs, ...obj.gridColorDataObj }\n    })\n    return allObjs\n  }\n  createGraph() {\n    let that = this\n    // take state of graph and multiple to get num\n    let cells =\n      parseInt(this.props.setGraphSize.x) * parseInt(this.props.setGraphSize.y)\n    if (!cells) {\n      console.error('No cell values')\n      return\n    }\n    that.setState({\n      boxesToRender: Array.from({ length: cells }, (v, i) => i)\n    })\n    setTimeout(() => {\n      this.setState({\n        startingCellNumAll: utils._calcStartingCell(this.props.setGraphSize)\n      })\n      this.calcRowVariaion()\n    })\n  }\n  // takes coords and type - needs access to state\n  _numToMove(x, y, type) {\n    if (type === 'stop') {\n      let moveX = Math.abs(this.state.previousStopX - x)\n      let moveY = Math.abs(this.state.previousStopY - y)\n      return {\n        tempX: moveX,\n        tempY: moveY\n      }\n    } else if (type === 'leg') {\n      let moveX = Math.abs(this.state.previousLegX - x)\n      let moveY = Math.abs(this.state.previousLegY - y)\n      return {\n        tempX: moveX,\n        tempY: moveY\n      }\n    } else {\n      console.error('error in the num to move function')\n    }\n  }\n  // take amount in leg with a percent - returns num to move out of total leg number\n  _percentToCoords(diffObj, percent) {\n    let xNum = Math.floor(diffObj.xDiff * 0.01 * percent)\n    let yNum = Math.floor(diffObj.yDiff * 0.01 * percent)\n    return { xNum, yNum }\n  }\n  // calc num of cells to vertial based on grid size\n  calcRowVariaion() {\n    // formula - move up/down is the same value as x and y\n    this.setState({\n      moveRowCells: parseInt(this.props.setGraphSize.x)\n    })\n  }\n  colorGrid(x, y, type, lineColor, objStore) {\n    // calc num of units to move based on prev position\n    let tempCellNumsArr = []\n    let tempCellNumsObj = {}\n    let tempX = x\n    let tempY = y\n    let tempCellNum\n    let loopAxis\n\n    if (type === 'all') {\n      tempCellNum = this.state.startingCellNumAll\n    }\n    // convert based on next move using above function\n    tempX = this._numToMove(tempX, tempY, 'stop').tempX\n    tempY = this._numToMove(tempX, tempY, 'stop').tempY\n    // on first move on grid only - for bottom corner\n    if (this.state.previousStopX === 0 && this.state.previousStopY === 0) {\n      tempX = tempX - 1\n      tempY = tempY - 1\n      const obj = utils._makePLotCellObj(tempCellNum, lineColor, utils._Cell)\n      tempCellNumsArr.push(obj)\n      tempCellNumsObj[obj.cellNum] = obj\n    }\n    // move in tandem while both vals exist\n    while (tempX && tempY) {\n      // console.log(tempX)\n      // if last was les than current- do this\n      if (this.state.previousStopY < y) {\n        tempCellNum = tempCellNum - this.state.moveRowCells\n        const obj = utils._makePLotCellObj(tempCellNum, lineColor, utils._Cell)\n        tempCellNumsArr.push(obj)\n        tempCellNumsObj[obj.cellNum] = obj\n      } else if (this.state.previousStopY > y) {\n        tempCellNum = tempCellNum + this.state.moveRowCells\n        const obj = utils._makePLotCellObj(tempCellNum, lineColor, utils._Cell)\n        tempCellNumsArr.push(obj)\n        tempCellNumsObj[obj.cellNum] = obj\n      }\n      if (this.state.previousStopX < x) {\n        tempCellNum = tempCellNum + 1\n        const obj = utils._makePLotCellObj(tempCellNum, lineColor, utils._Cell)\n        tempCellNumsArr.push(obj)\n        tempCellNumsObj[obj.cellNum] = obj\n      } else if (this.state.previousStopX > x) {\n        tempCellNum = tempCellNum - 1\n        const obj = utils._makePLotCellObj(tempCellNum, lineColor, utils._Cell)\n        tempCellNumsArr.push(obj)\n        tempCellNumsObj[obj.cellNum] = obj\n      }\n      tempX = tempX - 1\n      tempY = tempY - 1\n    }\n    // axis - loop over the only one left X or Y\n    loopAxis = tempY ? (loopAxis = tempY) : (loopAxis = tempX)\n    // if only on val left, move on its own\n    for (var i = 0; i < loopAxis; i++) {\n      if (tempY) {\n        if (this.state.previousStopY < y) {\n          tempCellNum = tempCellNum - this.state.moveRowCells\n          const obj = utils._makePLotCellObj(\n            tempCellNum,\n            lineColor,\n            utils._Cell\n          )\n          tempCellNumsArr.push(obj)\n          tempCellNumsObj[obj.cellNum] = obj\n        } else if (this.state.previousStopY > y) {\n          tempCellNum = tempCellNum + this.state.moveRowCells\n          const obj = utils._makePLotCellObj(\n            tempCellNum,\n            lineColor,\n            utils._Cell\n          )\n          tempCellNumsArr.push(obj)\n          tempCellNumsObj[obj.cellNum] = obj\n        }\n      } else if (tempX) {\n        if (this.state.previousStopX < x) {\n          tempCellNum = tempCellNum + 1\n          const obj = utils._makePLotCellObj(\n            tempCellNum,\n            lineColor,\n            utils._Cell\n          )\n          tempCellNumsArr.push(obj)\n          tempCellNumsObj[obj.cellNum] = obj\n        } else if (this.state.previousStopX > x) {\n          tempCellNum = tempCellNum - 1\n          const obj = utils._makePLotCellObj(\n            tempCellNum,\n            lineColor,\n            utils._Cell\n          )\n          tempCellNumsArr.push(obj)\n          tempCellNumsObj[obj.cellNum] = obj\n        }\n      }\n    }\n    if (type === 'all') {\n      this.setState({\n        previousStopX: x,\n        previousStopY: y,\n        startingCellNumAll: tempCellNum\n      })\n    }\n    return {\n      tempCellNumsArr,\n      tempCellNumsObj\n    }\n  }\n  combineStyles() {\n    let obj = {\n      ...gridStyles.gridStyles(this.props).graphContainer,\n      ...gridStyles.bodyStyles.body\n    }\n    return obj\n  }\n\n  // set coords in pxs of plots\n  _setStopCoords(type, arr, x, y) {\n    let that = this\n    // filter out undefined\n    if (type === 'stop') {\n      setTimeout(function() {\n        let coordsArr = []\n        if (arr.length > 0) {\n          arr.forEach(stop => {\n            let pixels = utils._convertToPixels(stop.x, stop.y)\n            let coords = {\n              pixels: pixels,\n              directions: {\n                xDir: 'left',\n                yDir: 'bottom'\n              }\n            }\n            coordsArr.push(coords)\n          })\n        }\n        that.setState(prevState => ({\n          stopsDirsArr: [...prevState.stopsDirsArr, coordsArr]\n        }))\n      })\n    } else if (type === 'driver') {\n      let pixels = utils._convertToPixels(x, y)\n      let coords = {\n        pixels: pixels,\n        directions: {\n          xDir: 'left',\n          yDir: 'bottom'\n        }\n      }\n      return coords\n    }\n  }\n  render() {\n    return (\n      <main className='graph-container' style={this.combineStyles()}>\n        <div className='graph' style={gridStyles.gridStyles(this.props).graph}>\n          {' '}\n          {this.state.plotSets.map((instance, i) => {\n            return (\n              <Point\n                key={i}\n                color={instance ? instance.plotColor : null}\n                coordsArrs={this.state.stopsDirsArr[i]}\n              />\n            )\n          })}{' '}\n          <Cell\n            toRender={this.state.boxesToRender}\n            allColorCellArr={\n              !this.state.finalStopColorCellArr\n                ? null\n                : this.state.finalStopColorCellArr\n            }\n            allColorCellObj={\n              !this.state.finalStopColorCellObj\n                ? null\n                : this.state.finalStopColorCellObj\n            }\n            type='all'\n          />{' '}\n        </div>\n      </main>\n    )\n  }\n}\nGraph.propTypes = {\n  plotSets: PropTypes.object,\n  setGraphSize: PropTypes.object\n}\n\nexport default Graph\n"],"names":["utils","x","y","totalX","totalY","moveX","parseInt","moveY","coordsObj","type","Math","abs","state","previousStopX","previousStopY","previousLegX","previousLegY","error","sizeObj","startingCellNum","firstCoordsObj","secondCoordsObj","xDiff","yDiff","firstLegStopObj","lastLegStopObj","numToMoveObj","x1","x2","y1","y2","xNum","yNum","xToMove","yToMove","diffObj","percent","floor","firstStop","driverCoords","yAbsDiff","xAbsDiff","xPercent","yPercent","plotsArr","map","coords","i","String","fromCharCode","currentState","cellNum","color","CellFunc","arrOfObjs","property","obj","gridStyles","props","setGraphSize","cellStyles","pointStyles","bodyStyles","module","Cell","CellMarkup","bind","toRender","result","allColorsAddLogic","React","allColorCellObj","cellObj","styles","cell","input","idStr","id","addColor","length","renderCells","Component","propTypes","PropTypes","object","array","string","Point","coordsArrs","injectIntoHead","output","stylesArr","Object","keys","j","k","values","a","styleTag","document","createElement","node","createTextNode","append","head","querySelector","appendChild","display","coord","directions","xDir","pixels","toString","yDir","Graph","Array","from","v","createGraph","loadPlotDatatoPlotSets","loadGridDataintoGridSets","plotSets","forEach","plots","_makePlotJson","set","setState","prevState","_calcStartingCell","calcRowVariaion","key","lineColor","_setStopCoords","tempGridSet","allColorsCounter","stop","colorGrid","gridColorDataObj","tempCellNumsArr","tempCellNumsObj","gridColorDataObjs","gridSets","resetColorGridState","makeSingleCellNumArr","makeSingleCellNumObj","arr","flat","allObjs","that","cells","objStore","tempX","tempY","tempCellNum","loopAxis","startingCellNumAll","_numToMove","_makePLotCellObj","_Cell","push","moveRowCells","graphContainer","body","coordsArr","_convertToPixels","stopsDirsArr","combineStyles","graph","instance","plotColor","boxesToRender","finalStopColorCellArr","finalStopColorCellObj"],"mappings":"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"}