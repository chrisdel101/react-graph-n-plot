{"version":3,"file":"export.js","sources":["src/utils/graph_utils.js","src/utils/styles.js","src/components/Cell.jsx","src/components/Point.jsx","src/components/Graph.jsx"],"sourcesContent":["var utils = (function() {\n  return {\n    _convertToPixels: function(x, y) {\n      if (!x) {\n        x = 0\n      }\n      if (!y) {\n        y = 0\n      }\n      let totalX\n      let totalY\n      if (x) {\n        x = x - 10\n        totalX = 100 + x * 11\n      } else {\n        totalX = x * 10\n      }\n      if (y) {\n        y = y - 10\n        totalY = 100 + y * 11\n      } else {\n        totalY = y * 10\n      }\n      let moveX = parseInt(totalX)\n      let moveY = parseInt(totalY)\n      let coordsObj = {\n        moveX: moveX,\n        moveY: moveY\n      }\n      return coordsObj\n    },\n    _numToMove: function(x, y, type) {\n      if (type === 'stop') {\n        let moveX = Math.abs(this.state.previousStopX - x)\n        let moveY = Math.abs(this.state.previousStopY - y)\n        return {\n          tempX: moveX,\n          tempY: moveY\n        }\n      } else if (type === 'leg') {\n        let moveX = Math.abs(this.state.previousLegX - x)\n        let moveY = Math.abs(this.state.previousLegY - y)\n        return {\n          tempX: moveX,\n          tempY: moveY\n        }\n      } else {\n        console.error('error in the num to move function')\n      }\n    },\n    _calcStartingCell: function(sizeObj) {\n      // find the corner cell formula is (x * y) - x\n      let startingCellNum =\n        parseInt(sizeObj.x) * parseInt(sizeObj.y) - parseInt(sizeObj.x)\n      return startingCellNum\n    },\n    // takes 2 objs of coords and determines the diff\n    _absDiff: function(firstCoordsObj, secondCoordsObj) {\n      let xDiff = Math.abs(firstCoordsObj.x - secondCoordsObj.x)\n      let yDiff = Math.abs(firstCoordsObj.y - secondCoordsObj.y)\n      return {\n        xDiff,\n        yDiff\n      }\n    },\n    _getDriverCoords: function(firstLegStopObj, lastLegStopObj, numToMoveObj) {\n      let x1 = firstLegStopObj.x\n      let x2 = lastLegStopObj.x\n      let y1 = firstLegStopObj.y\n      let y2 = lastLegStopObj.y\n      let xNum = numToMoveObj.xNum\n      let yNum = numToMoveObj.yNum\n      // if x moves up, add\n      let xToMove\n      let yToMove\n      if (x1 < x2) {\n        xToMove = x1 + xNum\n      } else if (x1 >= x2) {\n        xToMove = x1 - xNum\n      } else {\n        console.error('error in driver movement')\n      }\n      if (y1 < y2) {\n        yToMove = y1 + yNum\n      } else if (y1 >= y2) {\n        yToMove = y1 - yNum\n      } else {\n        console.error('error in driver movement')\n      }\n      return {\n        x: xToMove,\n        y: yToMove\n      }\n    },\n    // take amount in leg with a percent - returns num to move out of total leg number\n    _percentToCoords: function(diffObj, percent) {\n      let xNum = Math.floor(diffObj.xDiff * 0.01 * percent)\n      let yNum = Math.floor(diffObj.yDiff * 0.01 * percent)\n      return { xNum, yNum }\n    },\n    // takes first stop obj, driver coords obj, and abs diff of a single stops axis\n    _findPercentFromDriverCoords(firstStop, driverCoords, yAbsDiff, xAbsDiff) {\n      let x1 = parseInt(firstStop.x)\n      let y1 = parseInt(firstStop.y)\n      let x2 = parseInt(driverCoords.x)\n      let y2 = parseInt(driverCoords.y)\n\n      let xDiff\n      let yDiff\n\n      // find number moved from last stop\n      if (x1 < x2) {\n        xDiff = x2 - x1\n      } else if (x1 > x2) {\n        xDiff = x1 - x2\n      } else if (x1 === x2) {\n        xDiff = 0\n      } else {\n        console.error('error in driver movement')\n      }\n      if (y1 < y2) {\n        yDiff = y2 - y1\n      } else if (y1 > y2) {\n        yDiff = y1 - y2\n      } else if (y1 === y2) {\n        yDiff = 0\n      } else {\n        console.error('error in driver movement')\n      }\n\n      // divide number moved so far in leg by total number in leg\n      let xPercent\n      let yPercent\n      // check for zero vals\n      if (xDiff === 0) {\n        xPercent = 0\n      }\n      if (yDiff === 0) {\n        yPercent = 0\n      }\n      if (xDiff && xDiff !== 0) {\n        xPercent = xDiff / xAbsDiff\n      }\n      if (yDiff && yDiff !== 0) {\n        yPercent = yDiff / yAbsDiff\n      }\n      // let finalPercent\n\n      // if one val is missing use the other alone\n      if (!xPercent || !yPercent) {\n        if (xPercent) {\n          return xPercent * 100\n        } else if (yPercent) {\n          return yPercent * 100\n        }\n      }\n      // it both are zero then zero percent\n      if (xPercent === 0 && yPercent === 0) {\n        return 0\n      }\n\n      // use the larger leg to updaet val - TODO: make both percents equal so driver fits back into grid\n      if (xAbsDiff > yAbsDiff) {\n        return xPercent\n      } else if (xAbsDiff < yAbsDiff) {\n        return yPercent\n        // if equal use the larger percent\n      } else if (xAbsDiff === yAbsDiff) {\n        if (xPercent >= yPercent) {\n          return xPercent\n        } else {\n          return yPercent\n        }\n      } else {\n        console.error('An error occured in the percentage calcs')\n      }\n    },\n    // make json from the entered plot points\n    _makePlotJson(plotsArr) {\n      return plotsArr.map((coords, i) => {\n        return {\n          name: String.fromCharCode(i + 65),\n          x: coords.x,\n          y: coords.y\n        }\n      })\n    },\n    _toggleState(currentState) {\n      if (!currentState) {\n        return true\n      } else {\n        return false\n      }\n    },\n    _Cell(cellNum, color) {\n      this.cellNum = cellNum\n      this.color = color\n    },\n    _makePLotCellObj(cellNum, color, CellFunc) {\n      return new CellFunc(cellNum, color)\n    },\n    _arrOfObjsToArr(arrOfObjs, property) {\n      return arrOfObjs.map(obj => {\n        return obj[property]\n      })\n    }\n  }\n})()\n\nexport default utils\n","const gridStyles = function(props) {\n  return {\n    graphContainer: {\n      display: 'flex',\n      position: 'relative',\n      bottom: '0px'\n    },\n    graph: {\n      display: 'grid',\n      border: '1px solid black',\n      gridGap: '1px',\n      backgroundColor: 'black',\n      gridTemplateRows: `repeat(${props.setGraphSize.y}, 10px)`,\n      gridTemplateColumns: `repeat(${props.setGraphSize.x}, 10px)`\n    }\n  }\n}\nconst cellStyles = {\n  cell: {\n    width: '100%',\n    height: '100%',\n    backgroundColor: '#fff'\n  }\n}\nconst pointStyles = {\n  'point-marker:before': {\n    content: \"'●'\",\n    'font-size': '10px'\n  },\n  'point-marker': {\n    position: 'absolute',\n    bottom: '0px'\n  }\n}\nconst bodyStyles = {\n  body: {\n    margin: 0,\n    fontFamily:\n      '-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif',\n    WebkitFontSmoothing: 'antialiased',\n    MozOsxFontSmoothing: 'grayscale'\n  }\n}\nmodule.exports = {\n  bodyStyles,\n  cellStyles,\n  gridStyles,\n  pointStyles\n}\n// export gridStyles\n","import React from 'react'\nimport utils from '../utils/graph_utils'\nimport styles from '../utils/styles'\n\n// takes the num of boxes/cells to be produced\nclass Cell extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      allColored: false,\n      legColored: false,\n      completeColored: false,\n      allColorsCounter: 0,\n      legColorsCounter: 0,\n      completedColorsCounter: 0,\n      previousLegIndex: '',\n      cellsMounted: {},\n      cellNumsArr: [],\n      testArr: ['one', 'two', 'three']\n    }\n    this.CellMarkup = this.CellMarkup.bind(this)\n  }\n  renderCells(i) {\n    // console.log(this.props.gridColors)\n    if (this.props.toRender) {\n      const { toRender } = this.props\n      return toRender.map((obj, i) => {\n        let result\n        switch (this.props.type) {\n          case 'all':\n            if (!this.state.allColored) {\n              result = this.allColorsRemoveLogic(i)\n            } else if (this.state.allColored) {\n              result = this.allColorsAddLogic(i)\n            }\n            break\n          case 'leg':\n            if (!this.state.legColored) {\n              result = this.legColorsRemoveLogic(i)\n            } else if (this.state.legColored) {\n              result = this.legColorsAddLogic(i)\n            }\n            break\n          case 'complete':\n            if (!this.state.completeColored) {\n              result = this.completedColorsRemoveLogic(i)\n            } else if (this.state.completeColored) {\n              result = this.completedColorsAddLogic(i)\n            }\n            break\n          default:\n            // on first render just run markup\n            result = <this.CellMarkup key={i} id={i} />\n            break\n        }\n        return result\n      })\n    }\n  }\n  toggleColor(type) {\n    if (type === 'all') {\n      // console.log('opposite', this.state.allColored)\n      this.setState({\n        allColored: utils._toggleState(this.state.allColored)\n      })\n      // console.log(this.state.allColored)\n    } else if (type === 'leg') {\n      console.log('opposite', this.state.legColored)\n      this.setState({\n        legColored: utils._toggleState(this.state.legColored)\n      })\n    } else if (type === 'complete') {\n      console.log('opposite', this.state.completeColored)\n      this.setState({\n        completeColored: utils._toggleState(this.state.completeColored)\n      })\n    }\n  }\n  allColorsRemoveLogic(i) {\n    let { gridColors } = this.props\n    let hasStopColor = (() => {\n      if (gridColors && gridColors.includes(i)) return false\n    })()\n    return <this.CellMarkup hasStopColor={hasStopColor} key={i} id={i} />\n  }\n  legColorsAddLogic(i) {\n    let { legsColor } = this.props\n    legsColor = legsColor.leg\n    let hasLegColor = (() => {\n      if (!legsColor || !legsColor.length || !legsColor.includes(i)) {\n        return false\n      }\n      return true\n    })()\n    return <this.CellMarkup hasLegColor={hasLegColor} key={i} id={i} />\n  }\n  legColorsRemoveLogic(i) {\n    let { legsColor } = this.props\n    legsColor = legsColor.leg\n    let hasLegColor = (() => {\n      if (legsColor && legsColor.includes(i)) return false\n    })()\n    return <this.CellMarkup hasLegColor={hasLegColor} key={i} id={i} />\n  }\n  completedColorsAddLogic(i) {\n    let { completeColor } = this.props\n    let hasCompletionColor = (() => {\n      if (\n        !completeColor ||\n        !completeColor.length ||\n        !completeColor.includes(i)\n      ) {\n        return false\n      }\n      return true\n    })()\n    return (\n      <this.CellMarkup hasCompletionColor={hasCompletionColor} key={i} id={i} />\n    )\n  }\n  completedColorsRemoveLogic(i) {\n    let { completeColor } = this.props\n    let hasCompletionColor = (() => {\n      if (completeColor && completeColor.includes(i)) return false\n    })()\n    return (\n      <this.CellMarkup hasCompletionColor={hasCompletionColor} key={i} id={i} />\n    )\n  }\n  allColorsAddLogic(i) {\n    let { allColorCellObj } = this.props\n    // key object key with i\n    return <this.CellMarkup key={i} id={i} color={allColorCellObj[i]} />\n  }\n  combineStyles(cellObj) {\n    if (!this.state.styles) return\n    // console.log(this.state.styles)\n    const lineColor = this.addColor(cellObj)\n    let allStyle = { ...this.state.styles, ...lineColor }\n    return allStyle\n  }\n  addColor(cellObj) {\n    if (cellObj) {\n      return {\n        backgroundColor: cellObj.color\n      }\n    } else {\n      return styles.cellStyles.cell\n    }\n  }\n  CellMarkup(input) {\n    let idStr = `id${input.id}`\n    // console.log()\n    return (\n      <div\n        style={this.addColor(input.color)}\n        id={idStr}\n        key={input.id}\n        className='cell'\n      />\n    )\n  }\n  componentDidMount() {\n    this.setState({\n      styles\n    })\n    this.toggleColor('all')\n    // get arr of all cell nums\n  }\n  render() {\n    if (this.props.toRender && this.props.toRender.length) {\n      return <React.Fragment>{this.renderCells()}</React.Fragment>\n    } else {\n      return <div>No Cells yet!</div>\n    }\n  }\n}\n\nexport default Cell\n","import React from 'react'\nimport styles from '../utils/styles'\n\n// takes and array of directions and pixes for x and y\nfunction Point(props) {\n  if (!props.coordsArrs) return null\n\n  function injectIntoHead() {\n    let output = ''\n    let stylesArr = Object.keys(styles.pointStyles)\n    for (let i = 0; i < stylesArr.length; i += 1) {\n      let j = Object.keys(styles.pointStyles[stylesArr[i]])\n      // console.log('j', j)\n      let k = Object.values(styles.pointStyles[stylesArr[i]])\n      // console.log('k', k)\n\n      output += `.${stylesArr[i]}\\n {`\n      // console.log('SA', stylesArr[i])\n      for (let a = 0; a < j.length; a += 1) {\n        // console.log('KEY', j[a])\n        output += ` ${j[a]}: ${k[a]}; `\n      }\n\n      output += '}\\n\\n'\n    }\n    // console.log('output', output)\n\n    // styleStr1 = `.point-marker: ${styleStr1}`\n    // let tag = document.createElement('style')\n    let styleTag = document.createElement('style')\n    styleTag.type = 'text/css'\n    // let str = `body: {background-color:yellow}`\n    let node = document.createTextNode(output)\n    styleTag.append(node)\n    // console.log(styleTag)\n\n    // let node = document.createTextNode(styleStr)\n    // tag.appendChild(node)\n    // tag.type = 'text/css'\n    // console.log(tag)\n    // let style = JSON.stringify(styles.pointStyles['point-marker:before'])\n    // style = `point-marker:before ${style}`\n    // console.log(style)\n\n    let head = document.querySelector('head')\n\n    head.appendChild(styleTag)\n    // let tag = document.createElement(node)\n    // console.log(head)\n    // console.log(tag)\n    // tag.appendChild(style)\n    // console.log(tag)\n    // head.append\n  }\n  injectIntoHead()\n  function combineStyles(prevStyles) {\n    return { ...prevStyles, ...styles.pointStyles['point-marker'] }\n  }\n  let display\n  !props.color ? (display = 'none') : (display = 'block')\n  return props.coordsArrs.map((coord, i) => {\n    let styles = {\n      display: display,\n      color: props.color,\n      [coord.directions.xDir]: coord.pixels.moveX.toString() + 'px',\n      [coord.directions.yDir]: coord.pixels.moveY.toString() + 'px'\n    }\n    return <div className='point-marker' style={styles} key={i} />\n  })\n}\n\nexport default Point\n","import React, { Component } from 'react'\n\nimport Cell from './Cell.jsx'\nimport Point from './Point.jsx'\n// import Cursor from './Cursor'\nimport utils from '../utils/graph_utils'\nimport gridStyles from '../utils/styles'\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      stopsDirsArr: [],\n      allColorsCounter: 0,\n      legColorsCounter: 0,\n      completedColorsCounter: 0,\n      colorType: '',\n      cursorIndex: 0,\n      createCounter: 0,\n      legsCoordsObjs: [],\n      legsStartEndObjs: [],\n      plotSets: [],\n      gridSets: [],\n      legToColorID: '',\n      cursorFormX: '',\n      cursorFormY: '',\n      cursorArr: [],\n      cursorInputProgress: '',\n      startingCellNumAll: 0,\n      startingCellNumPartial: '',\n      previousLegEndCell: 0,\n      previousStopX: 0,\n      previousStopY: 0,\n      previousLegX: 0,\n      previousLegY: 0,\n      partialLegStartCoords: '',\n      partialLegEndCoords: '',\n      boxesToRender: Array.from({ length: 100 }, (v, i) => i),\n      holdAllStopColorIndexes: [],\n      holdAllLegColorArrs: [],\n      holdingCompletedArrs: [],\n      finalStopColorObjs: [],\n      finalLegColorObj: [],\n      finalCompletedColorsArr: [],\n      finalStopColorCellObj: {},\n      finalDriverMoveObj: '',\n      finalSliderCoords: [],\n      finalStopColorCellArr: [],\n      legStartEndCellNums: []\n    }\n  }\n  componentDidMount() {\n    this.createGraph()\n    this.loadPlotDatatoPlotSets()\n    this.loadGridDataintoGridSets()\n    this.addNewCursor()\n    setTimeout(() => {\n      this.updateDriverWithCoords('', 'manual')\n      this.colorLeg(this.props.legToColorID)\n    })\n  }\n  // make props coords into useable json\n  loadPlotDatatoPlotSets(type) {\n    // load plotsets into state\n    Object.values(this.props.plotSets).forEach(set => {\n      // update with _makePlotJson func\n      set.plots = utils._makePlotJson(set.plots)\n      this.setState(prevState => ({\n        plotSets: [...prevState.plotSets, set]\n      }))\n    })\n  }\n  // set state after color grid runs through a set\n  resetColorGridState() {\n    this.setState({\n      startingCellNumAll: utils._calcStartingCell(this.props.setGraphSize),\n      previousStopX: 0,\n      previousStopY: 0\n    })\n    this.calcRowVariaion()\n  }\n  // use plot json to set stops and make colored grid\n  loadGridDataintoGridSets() {\n    setTimeout(() => {\n      // loop over each obj\n      for (let key in this.state.plotSets) {\n        const plotsArr = this.state.plotSets[key].plots\n        const { lineColor } = this.state.plotSets[key]\n        // get the array inside and set stops\n        this._setStopCoords('stop', plotsArr)\n        const tempGridSet = {\n          legStopsNames: this.legConstructor(plotsArr),\n          legStartEnd: [],\n          legColorData: [],\n          gridColorDataObjs: [],\n          gridColorDataObj: {},\n          name: `set${key}`,\n          allColorsCounter: this.state.allColorsCounter,\n          legColorsCounter: this.state.legColorsCounter,\n          colorType: 'all'\n        }\n        plotsArr.forEach((stop, i) => {\n          const { legStartEndCellNums, holdAllLegColorArrs } = this.legStartEnd(\n            stop.x,\n            stop.y,\n            'all'\n          )\n          tempGridSet.legColorData.push(holdAllLegColorArrs)\n          tempGridSet.legStartEnd.push(legStartEndCellNums)\n          const { tempCellNumsArr, tempCellNumsObj } = this.colorGrid(\n            stop.x,\n            stop.y,\n            'all',\n            lineColor,\n            tempGridSet.gridColorDataObj\n          )\n          tempGridSet.gridColorDataObjs = [\n            ...tempGridSet.gridColorDataObjs,\n            ...tempCellNumsArr\n          ]\n          tempGridSet.gridColorDataObj = {\n            ...tempGridSet.gridColorDataObj,\n            ...tempCellNumsObj\n          }\n        })\n        this.setState(prevState => ({\n          gridSets: [...prevState.gridSets, tempGridSet]\n        }))\n        this.resetColorGridState()\n\n        // this.setState(prevState => ({\n        //   legsCoordsObjs: [...prevState.legsCoordsObjs, legArr],\n        //   legsStartEndObjs: [...prevState.legsStartEndObjs, legData],\n        //   holdAllStopColorIndexes: [\n        //     ...prevState.holdAllStopColorIndexes,\n        //     gridColorData\n        //   ]\n        // }))\n        // })\n      }\n      this.setState({\n        finalStopColorCellArr: this.makeSingleCellNumArr(),\n        finalStopColorCellObj: this.makeSingleCellNumObj()\n      })\n    })\n  }\n  // combine all color cells into one array\n  makeSingleCellNumArr() {\n    const arr = this.state.gridSets\n      .map(obj => {\n        // console.log(obj)\n        return obj.gridColorDataObjs\n      })\n      .flat()\n    return arr\n  }\n  // spread all objs into one big one for lookup\n  makeSingleCellNumObj() {\n    let allObjs = {}\n    this.state.gridSets.forEach(obj => {\n      allObjs = { ...allObjs, ...obj.gridColorDataObj }\n    })\n    return allObjs\n  }\n  createGraph() {\n    let that = this\n    // take state of graph and multiple to get num\n    let cells =\n      parseInt(this.props.setGraphSize.x) * parseInt(this.props.setGraphSize.y)\n    if (!cells) {\n      console.error('No cell values')\n      return\n    }\n    that.setState({\n      boxesToRender: Array.from({ length: cells }, (v, i) => i)\n    })\n    setCSSvars()\n    // sets vals in css to grid size\n    function setCSSvars() {\n      // console.log(that.state.setGraphSize)\n      let root = document.documentElement\n      root.style.setProperty('--graph-size-x', that.props.setGraphSize.x)\n      root.style.setProperty('--graph-size-y', that.props.setGraphSize.y)\n    }\n    setTimeout(() => {\n      this.setState({\n        startingCellNumAll: utils._calcStartingCell(this.props.setGraphSize)\n      })\n      this.calcRowVariaion()\n    })\n  }\n  // takes coords and type - needs access to state\n  _numToMove(x, y, type) {\n    if (type === 'stop') {\n      let moveX = Math.abs(this.state.previousStopX - x)\n      let moveY = Math.abs(this.state.previousStopY - y)\n      return {\n        tempX: moveX,\n        tempY: moveY\n      }\n    } else if (type === 'leg') {\n      let moveX = Math.abs(this.state.previousLegX - x)\n      let moveY = Math.abs(this.state.previousLegY - y)\n      return {\n        tempX: moveX,\n        tempY: moveY\n      }\n    } else {\n      console.error('error in the num to move function')\n    }\n  }\n  // take amount in leg with a percent - returns num to move out of total leg number\n  _percentToCoords(diffObj, percent) {\n    let xNum = Math.floor(diffObj.xDiff * 0.01 * percent)\n    let yNum = Math.floor(diffObj.yDiff * 0.01 * percent)\n    return { xNum, yNum }\n  }\n  // update createCounter by 1\n  increaseCursorIdindex() {\n    let x = this.state.createCounter + 1\n    this.setState({\n      createCounter: x\n    })\n  }\n  // new add driver - runs on mount and when add button clicked\n  addNewCursor() {\n    let newCursorObj = {\n      directions: {\n        xDir: 'left',\n        yDir: 'bottom'\n      },\n      pixels: {\n        moveX: 0,\n        moveY: 0\n      },\n      id: this.state.createCounter,\n      name: `cursor ${this.state.createCounter + 1}`,\n      color: 'blue',\n      show: true\n    }\n    let arr = []\n    arr.push(newCursorObj)\n    let allCursors = this.state.cursorArr.concat(arr)\n    this.setState({\n      cursorArr: allCursors\n    })\n    this.increaseCursorIdindex()\n  }\n  // on click set driver with coords and send to child\n  updateDriverWithCoords(coords, type) {\n    let selectedDriver = this.state.cursorArr[this.state.cursorIndex]\n    let cursorArr = [...this.state.cursorArr]\n    if (type === 'form') {\n      // reset to zero\n      this._resetCursor()\n      // from form\n      coords = this._setStopCoords(\n        'driver',\n        this.state.cursorFormX,\n        this.state.cursorFormY\n      )\n      // toggle driver to first stop of map start\n    } else if (type === 'checkbox') {\n    } else if (type === 'slider') {\n      // from params\n      coords = this._setStopCoords('driver', coords.x, coords.y)\n    } else if (type === 'manual') {\n      // reset to zero\n      this._resetCursor()\n      coords = this._setStopCoords('driver', '10', '10')\n      cursorArr[this.state.cursorIndex].driverCoords = { x: 5, y: 5 }\n    }\n    // subtract for icon positionSelect\n    coords.pixels.moveX = coords.pixels.moveX - 30\n    // update the values in the object\n    cursorArr[this.state.cursorIndex].directions = coords.directions\n    cursorArr[this.state.cursorIndex].pixels = coords.pixels\n    // set new driver vals\n    this.setState({\n      cursorArr: cursorArr\n    })\n  }\n  // calc up to driver position to color\n  colorCompleted(legID, type) {\n    let selectedDriver = this.state.cursorArr[this.state.cursorIndex]\n    var arr = this.state.legs.filter(leg => {\n      // console.log(leg.legID)\n      return leg.legID === legID\n    })\n\n    // index for arr of cell nums\n    let holdingArrIndex = this._legIndex(arr[0].legID)\n    // index for json with legs info\n    let dataIndex = this.state.legs.indexOf(arr[0])\n    // all previous legs to color\n    // var previousLegNames = this.state.legs.slice(0,index)\n\n    // get arr of all previous arrs to cell nums\n    // var previousLegArrs = this.state.holdAllLegColorArrs.slice(0, holdingArrIndex)\n    // get current arr leg of cell nums\n    // var currentLegArr = this.state.holdAllLegColorArrs[holdingArrIndex]\n    // console.log('previouslegs', previousLegArrs)\n    // console.log('currnt arr', currentLegArr)\n    // get current and next leg json info\n    let thisLeg = this.state.legs[dataIndex]\n    // console.log(thisLeg)\n    let legFirstStop = this.state.stops.filter(stop => {\n      return stop.name === thisLeg.startStop\n    })\n    // console.log(legFirstStop)\n    let legLastStop = this.state.stops.filter(stop => {\n      return stop.name === thisLeg.endStop\n    })\n    // get first and end coords\n    let stopStartCoords = {\n      x: legFirstStop[0].x,\n      y: legFirstStop[0].y\n    }\n    let stopEndCoords = {\n      x: legLastStop[0].x,\n      y: legLastStop[0].y\n    }\n    // console.log(stopStartCoords)\n    // console.log(stopEndCoords)\n    // get diff to get number of moves\n    // let diffObj = utils._absDiff(stopStartCoords, stopEndCoords)\n    // console.log(diff)\n    // percent driver is complete of leg\n    // let progress = parseInt(this.state.driver.legProgress)\n    // // takes number of moves and percent - returns number of moves that is partial of leg in coords\n    // let numToMove = utils._percentToCoords(diffObj, progress)\n    // console.log('num to move', numToMove)\n    // console.log(this.state.legStartEndCellNums)\n    // cell nums\n    let start = this.state.legStartEndCellNums[holdingArrIndex]\n    // console.log('start/end', start, end)\n    // set startingCell and start x / y\n\n    // this.state.startingCellNumPartial: start/end cells\n    // 24034 34034\n    // this.partialLegStartCoords: start x/y\n    // {x: 35, y: 80}\n    // this.state.partialLegEndCoords: end\n    // {x: 35, y: 30}\n    var previousLegArrs = this.state.holdAllLegColorArrs.slice(\n      0,\n      holdingArrIndex\n    )\n\n    this.setState({\n      startingCellNumPartial: start,\n      partialLegStartCoords: stopStartCoords,\n      partialLegEndCoords: stopEndCoords,\n      holdingCompletedArrs: [...previousLegArrs]\n    })\n    // console.log('startingCell', start)\n    // console.log('stop/start', stopStartCoords)\n    // console.log('partial leg end', stopEndCoords)\n    // console.log('all', [...previousLegArrs])\n\n    // console.log(this.state.holdingCompletedArrs)\n    // console.log(start, end)\n    // set state to start coords\n    // inout end coords\n    // this.state.driverCoords.x = 20\n    // this.state.driverCoords.y = 13\n    // console.log(selectedDriver)\n    if (type === 'data') {\n      // console.log(selectedDriver)\n      this.legStartEnd(\n        selectedDriver.driverCoords.x,\n        selectedDriver.driverCoords.y,\n        'partial'\n      )\n    } else if (type === 'coords') {\n      this.legStartEnd(\n        selectedDriver.driverCoords.x,\n        selectedDriver.driverCoords.y,\n        'partial'\n      )\n    }\n  }\n  // calc num of cells to vertial based on grid size\n  calcRowVariaion() {\n    // formula - move up/down is the same value as x and y\n    this.setState({\n      moveRowCells: parseInt(this.props.setGraphSize.x)\n    })\n  }\n  colorGrid(x, y, type, lineColor, objStore) {\n    // calc num of units to move based on prev position\n    let tempCellNumsArr = []\n    let tempCellNumsObj = {}\n    let tempX = x\n    let tempY = y\n    let tempCellNum\n    let loopAxis\n\n    if (type === 'all') {\n      tempCellNum = this.state.startingCellNumAll\n    }\n    // convert based on next move using above function\n    tempX = this._numToMove(tempX, tempY, 'stop').tempX\n    tempY = this._numToMove(tempX, tempY, 'stop').tempY\n    // on first move on grid only - for bottom corner\n    if (this.state.previousStopX === 0 && this.state.previousStopY === 0) {\n      tempX = tempX - 1\n      tempY = tempY - 1\n      const obj = utils._makePLotCellObj(tempCellNum, lineColor, utils._Cell)\n      tempCellNumsArr.push(obj)\n      tempCellNumsObj[obj.cellNum] = obj\n    }\n    // move in tandem while both vals exist\n    while (tempX && tempY) {\n      // console.log(tempX)\n      // if last was les than current- do this\n      if (this.state.previousStopY < y) {\n        tempCellNum = tempCellNum - this.state.moveRowCells\n        const obj = utils._makePLotCellObj(tempCellNum, lineColor, utils._Cell)\n        tempCellNumsArr.push(obj)\n        tempCellNumsObj[obj.cellNum] = obj\n      } else if (this.state.previousStopY > y) {\n        tempCellNum = tempCellNum + this.state.moveRowCells\n        const obj = utils._makePLotCellObj(tempCellNum, lineColor, utils._Cell)\n        tempCellNumsArr.push(obj)\n        tempCellNumsObj[obj.cellNum] = obj\n      }\n      if (this.state.previousStopX < x) {\n        tempCellNum = tempCellNum + 1\n        const obj = utils._makePLotCellObj(tempCellNum, lineColor, utils._Cell)\n        tempCellNumsArr.push(obj)\n        tempCellNumsObj[obj.cellNum] = obj\n      } else if (this.state.previousStopX > x) {\n        tempCellNum = tempCellNum - 1\n        const obj = utils._makePLotCellObj(tempCellNum, lineColor, utils._Cell)\n        tempCellNumsArr.push(obj)\n        tempCellNumsObj[obj.cellNum] = obj\n      }\n      tempX = tempX - 1\n      tempY = tempY - 1\n    }\n    // axis - loop over the only one left X or Y\n    loopAxis = tempY ? (loopAxis = tempY) : (loopAxis = tempX)\n    // if only on val left, move on its own\n    for (var i = 0; i < loopAxis; i++) {\n      if (tempY) {\n        if (this.state.previousStopY < y) {\n          tempCellNum = tempCellNum - this.state.moveRowCells\n          const obj = utils._makePLotCellObj(\n            tempCellNum,\n            lineColor,\n            utils._Cell\n          )\n          tempCellNumsArr.push(obj)\n          tempCellNumsObj[obj.cellNum] = obj\n        } else if (this.state.previousStopY > y) {\n          tempCellNum = tempCellNum + this.state.moveRowCells\n          const obj = utils._makePLotCellObj(\n            tempCellNum,\n            lineColor,\n            utils._Cell\n          )\n          tempCellNumsArr.push(obj)\n          tempCellNumsObj[obj.cellNum] = obj\n        }\n      } else if (tempX) {\n        if (this.state.previousStopX < x) {\n          tempCellNum = tempCellNum + 1\n          const obj = utils._makePLotCellObj(\n            tempCellNum,\n            lineColor,\n            utils._Cell\n          )\n          tempCellNumsArr.push(obj)\n          tempCellNumsObj[obj.cellNum] = obj\n        } else if (this.state.previousStopX > x) {\n          tempCellNum = tempCellNum - 1\n          const obj = utils._makePLotCellObj(\n            tempCellNum,\n            lineColor,\n            utils._Cell\n          )\n          tempCellNumsArr.push(obj)\n          tempCellNumsObj[obj.cellNum] = obj\n        }\n      }\n    }\n    if (type === 'all') {\n      this.setState({\n        previousStopX: x,\n        previousStopY: y,\n        startingCellNumAll: tempCellNum\n      })\n    }\n    return {\n      tempCellNumsArr,\n      tempCellNumsObj\n    }\n  }\n  // takes x y and determine start and end cells\n  legStartEnd(x, y, type) {\n    let tempCellNumsArr = []\n    let tempX = x\n    let tempY = y\n    // start remains the same\n    let tempStartNum\n    // cell num changes with calcs\n    let tempCellNum\n    let loopAxis\n    if (type === 'all') {\n      // on first move only\n      if (this.state.previousLegEndCell === 0) {\n        tempStartNum = this.state.startingCellNumAll\n        tempCellNum = this.state.startingCellNumAll\n      } else {\n        tempStartNum = this.state.previousLegEndCell\n        tempCellNum = this.state.previousLegEndCell\n      }\n    } else if (type === 'partial') {\n      // start of leg\n      tempCellNum = this.state.startingCellNumPartial\n      // need to reset previous x and y\n      this.setState({\n        previousLegX: this.state.partialLegStartCoords.x,\n        previousLegY: this.state.partialLegStartCoords.y\n      })\n    }\n    // convert based on next move using above function\n    ;({ tempX, tempY } = this._numToMove(tempX, tempY, 'leg'))\n    // on first move on grid only - for bottom corner\n    if (this.state.previousLegX === 0 && this.state.previousLegY === 0) {\n      tempX = tempX - 1\n      tempY = tempY - 1\n      tempCellNumsArr.push(tempCellNum)\n    }\n    // move in tandem while both vals exist\n    while (tempX && tempY) {\n      // if last was les than current- do this\n      if (this.state.previousLegY < y) {\n        tempCellNum = tempCellNum - this.state.moveRowCells\n        tempCellNumsArr.push(tempCellNum)\n      } else if (this.state.previousLegY > y) {\n        tempCellNum = tempCellNum + this.state.moveRowCells\n        tempCellNumsArr.push(tempCellNum)\n      }\n      if (this.state.previousLegX < x) {\n        tempCellNum = tempCellNum + 1\n        tempCellNumsArr.push(tempCellNum)\n      } else if (this.state.previousLegX > x) {\n        tempCellNum = tempCellNum - 1\n        tempCellNumsArr.push(tempCellNum)\n      }\n      tempX = tempX - 1\n      tempY = tempY - 1\n    }\n    // axis - loop over the only one left X or Y\n    loopAxis = tempY ? (loopAxis = tempY) : (loopAxis = tempX)\n    // if only on val left, move on its own\n    for (var i = 0; i < loopAxis; i++) {\n      if (tempY) {\n        if (this.state.previousLegY < y) {\n          tempCellNum = tempCellNum - this.state.moveRowCells\n          tempCellNumsArr.push(tempCellNum)\n        } else if (this.state.previousLegY > y) {\n          tempCellNum = tempCellNum + this.state.moveRowCells\n          tempCellNumsArr.push(tempCellNum)\n        }\n      } else if (tempX) {\n        if (this.state.previousLegX < x) {\n          tempCellNum = tempCellNum + 1\n          tempCellNumsArr.push(tempCellNum)\n        } else if (this.state.previousLegX > x) {\n          tempCellNum = tempCellNum - 1\n          tempCellNumsArr.push(tempCellNum)\n        }\n      }\n    }\n    let legCellNums = {\n      start: tempStartNum,\n      end: tempCellNum\n    }\n    // - make this previousLast\n    if (type === 'all') {\n      this.setState({\n        previousLegEndCell: tempCellNum,\n        previousLegX: x,\n        previousLegY: y\n        // legStartEndCellNums: [...this.state.legStartEndCellNums, legCellNums],\n        // holdAllLegColorArrs: [\n        //   ...this.state.holdAllLegColorArrs,\n        //   tempCellNumsArr\n        // ]\n      })\n      return {\n        legStartEndCellNums: legCellNums,\n        holdAllLegColorArrs: tempCellNumsArr\n      }\n    } else if (type === 'partial') {\n      this.setState({\n        previousStopX: x,\n        previousStopY: y,\n        startingCellNumPartial: tempCellNum,\n        holdingCompletedArrs: [\n          ...this.state.holdingCompletedArrs,\n          tempCellNumsArr\n        ]\n      })\n    }\n  }\n  // on click pass props to child\n  colorCompletedStops() {\n    console.log(this.state.holdingCompletedArrs)\n    let merged = [].concat.apply([], this.state.holdingCompletedArrs)\n    this.setState({\n      finalCompletedColorsArr: merged\n    })\n  }\n  // takes driver coords and finds the leg start\n  _getLegStartfromCoords() {\n    let selectedDriver = this.state.cursorArr[this.state.cursorIndex]\n    let coords = selectedDriver.driverCoords\n    // if x & y is between the stops\n    let firstStop = this.state.stops.filter((coord, index) => {\n      let stop1 = this.state.stops[index]\n      let stop2 = this.state.stops[index + 1]\n      if (stop2 === undefined) return false\n      if (\n        // x/y are both btw\n        ((coords.y > stop1.y && coords.y < stop2.y) ||\n          (coords.y < stop1.y && coords.y > stop2.y)) &&\n        ((coords.x > stop1.x && coords.x < stop2.x) ||\n          (coords.x < stop1.x && coords.x > stop2.x))\n      ) {\n        return coord\n      } else if (\n        // y is bwn and x is equal\n        ((coords.y > stop1.y && coords.y < stop2.y) ||\n          (coords.y < stop1.y && coords.y > stop2.y)) &&\n        (coords.x === stop1.x && coords.x === stop2.x)\n      ) {\n        return coord\n      } else if (\n        // x is bwn and y is equal\n        ((coords.x > stop1.x && coords.x < stop2.x) ||\n          (coords.x < stop1.x && coords.x > stop2.x)) &&\n        (coords.y === stop1.y && coords.y === stop2.y)\n      ) {\n        return coord\n      } else if (\n        // coords are exact match\n        coords.x === stop1.x &&\n        coords.y === stop1.y\n      ) {\n        return coord\n        // first stop  on map with nothing previous\n      } else if (index === 0 && coord === this.state.stops[0]) {\n        // console.log('first stop on map')\n        return coord\n      } else {\n        // not within the stops\n        return null\n      }\n    })\n    return firstStop\n  }\n\n  // resets data but does not move\n  _resetCursor() {\n    this.setState({\n      finalDriverMoveObj: {\n        directions: {\n          xDir: 'left',\n          yDir: 'bottom'\n        },\n        pixels: {\n          moveX: 0,\n          moveY: 0\n        }\n      }\n    })\n  }\n  combineStyles() {\n    console.log('DB', gridStyles.bodyStyles.body)\n    let obj = {\n      ...gridStyles.gridStyles(this.props).graphContainer,\n      ...gridStyles.bodyStyles.body\n    }\n    return obj\n  }\n\n  render() {\n    return (\n      <main className='graph-container' style={this.combineStyles()}>\n        <div className='graph' style={gridStyles.gridStyles(this.props).graph}>\n          {' '}\n          {this.state.plotSets.map((instance, i) => {\n            return (\n              <Point\n                key={i}\n                color={instance ? instance.plotColor : null}\n                coordsArrs={this.state.stopsDirsArr[i]}\n              />\n            )\n          })}{' '}\n          <Cell\n            toRender={this.state.boxesToRender}\n            allColorCellArr={\n              !this.state.finalStopColorCellArr\n                ? null\n                : this.state.finalStopColorCellArr\n            }\n            allColorCellObj={\n              !this.state.finalStopColorCellObj\n                ? null\n                : this.state.finalStopColorCellObj\n            }\n            type='all'\n          />{' '}\n        </div>\n      </main>\n    )\n  }\n\n  _legIndex(input) {\n    let index\n    switch (input) {\n      // pre-stop\n      case 'ZZ':\n        index = 0\n        break\n      case 'AB':\n        index = 1\n        break\n      case 'BC':\n        index = 2\n        break\n      case 'CD':\n        index = 3\n        break\n      case 'DE':\n        index = 4\n        break\n      case 'EF':\n        index = 5\n        break\n      case 'FG':\n        index = 6\n        break\n      case 'GH':\n        index = 7\n        break\n      case 'HI':\n        index = 8\n        break\n      case 'IJ':\n        index = 9\n        break\n      case 'JK':\n        index = 10\n        break\n      case 'KL':\n        index = 11\n        break\n      default:\n        console.error('Nothing in switch')\n        break\n    }\n    return index\n  }\n  colorLeg(input) {\n    // if no props don't call\n    if (!this.props.legToColorID) return\n    // change it to an index\n    let index = this._legIndex(input)\n    // get leg using index out of array\n    let leg = this.state.holdAllLegColorArrs[index]\n    // set state on child to change the color\n    let legObj = { leg, index }\n    this.setState({\n      finalLegColorObj: legObj,\n      legColorsCounter: this.state.legColorsCounter + 1,\n      colorType: 'leg'\n    })\n    console.log('FL', this.state.finalLegColorObj)\n  }\n  // build legs out of stops\n  legConstructor(stops) {\n    const legs = stops\n      .map((stop, i) => {\n        if (!stops[i + 1]) return false\n        return {\n          startStop: stop.name,\n          endStop: stops[i + 1].name,\n          legID: `${stop.name}${stops[i + 1].name}`\n        }\n      })\n      .filter(stop => stop)\n    return legs\n  }\n  // set coords in pxs of plots\n  _setStopCoords(type, arr, x, y) {\n    let that = this\n    // filter out undefined\n    if (type === 'stop') {\n      setTimeout(function() {\n        let coordsArr = []\n        if (arr.length > 0) {\n          arr.forEach(stop => {\n            let pixels = utils._convertToPixels(stop.x, stop.y)\n            let coords = {\n              pixels: pixels,\n              directions: {\n                xDir: 'left',\n                yDir: 'bottom'\n              }\n            }\n            coordsArr.push(coords)\n          })\n        }\n        that.setState(prevState => ({\n          stopsDirsArr: [...prevState.stopsDirsArr, coordsArr]\n        }))\n      })\n    } else if (type === 'driver') {\n      let pixels = utils._convertToPixels(x, y)\n      let coords = {\n        pixels: pixels,\n        directions: {\n          xDir: 'left',\n          yDir: 'bottom'\n        }\n      }\n      return coords\n    }\n  }\n}\n\nexport default Graph\n"],"names":["utils","x","y","totalX","totalY","moveX","parseInt","moveY","coordsObj","type","Math","abs","state","previousStopX","previousStopY","previousLegX","previousLegY","error","sizeObj","startingCellNum","firstCoordsObj","secondCoordsObj","xDiff","yDiff","firstLegStopObj","lastLegStopObj","numToMoveObj","x1","x2","y1","y2","xNum","yNum","xToMove","yToMove","diffObj","percent","floor","firstStop","driverCoords","yAbsDiff","xAbsDiff","xPercent","yPercent","plotsArr","map","coords","i","String","fromCharCode","currentState","cellNum","color","CellFunc","arrOfObjs","property","obj","gridStyles","props","setGraphSize","cellStyles","pointStyles","bodyStyles","module","Cell","CellMarkup","bind","toRender","result","allColored","allColorsRemoveLogic","allColorsAddLogic","legColored","legColorsRemoveLogic","legColorsAddLogic","completeColored","completedColorsRemoveLogic","completedColorsAddLogic","React","setState","_toggleState","log","gridColors","hasStopColor","includes","legsColor","leg","hasLegColor","length","completeColor","hasCompletionColor","allColorCellObj","cellObj","styles","lineColor","addColor","allStyle","cell","input","idStr","id","toggleColor","renderCells","Component","Point","coordsArrs","injectIntoHead","output","stylesArr","Object","keys","j","k","values","a","styleTag","document","createElement","node","createTextNode","append","head","querySelector","appendChild","display","coord","directions","xDir","pixels","toString","yDir","Graph","Array","from","v","createGraph","loadPlotDatatoPlotSets","loadGridDataintoGridSets","addNewCursor","updateDriverWithCoords","colorLeg","legToColorID","plotSets","forEach","plots","_makePlotJson","set","prevState","_calcStartingCell","calcRowVariaion","key","_setStopCoords","tempGridSet","legConstructor","allColorsCounter","legColorsCounter","stop","legStartEnd","legStartEndCellNums","holdAllLegColorArrs","legColorData","push","colorGrid","gridColorDataObj","tempCellNumsArr","tempCellNumsObj","gridColorDataObjs","gridSets","resetColorGridState","makeSingleCellNumArr","makeSingleCellNumObj","arr","flat","allObjs","that","cells","setCSSvars","root","documentElement","style","setProperty","createCounter","newCursorObj","allCursors","cursorArr","concat","increaseCursorIdindex","selectedDriver","cursorIndex","_resetCursor","cursorFormX","cursorFormY","legID","legs","filter","holdingArrIndex","_legIndex","dataIndex","indexOf","thisLeg","legFirstStop","stops","name","startStop","legLastStop","endStop","stopStartCoords","stopEndCoords","start","previousLegArrs","slice","objStore","tempX","tempY","tempCellNum","loopAxis","startingCellNumAll","_numToMove","_makePLotCellObj","_Cell","moveRowCells","tempStartNum","previousLegEndCell","startingCellNumPartial","partialLegStartCoords","legCellNums","holdingCompletedArrs","merged","apply","index","stop1","stop2","undefined","body","graphContainer","combineStyles","graph","instance","plotColor","stopsDirsArr","boxesToRender","finalStopColorCellArr","finalStopColorCellObj","legObj","finalLegColorObj","coordsArr","_convertToPixels"],"mappings":"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"}