{"version":3,"file":"export.js","sources":["src/utils/styles.js","src/components/Cell.jsx","src/components/Point.jsx","src/utils/graph_utils.js","src/components/Graph.jsx"],"sourcesContent":["const gridStyles = function(props) {\n  return {\n    graphContainer: {\n      display: 'flex',\n      position: 'relative',\n      bottom: '0px'\n    },\n    graph: {\n      display: 'grid',\n      border: '1px solid black',\n      gridGap: '1px',\n      backgroundColor: 'black',\n      gridTemplateRows: `repeat(${props.setGraphSize.y}, 10px)`,\n      gridTemplateColumns: `repeat(${props.setGraphSize.x}, 10px)`\n    }\n  }\n}\nconst cellStyles = {\n  cell: {\n    width: '100%',\n    height: '100%',\n    backgroundColor: '#fff'\n  }\n}\nconst pointStyles = {\n  'point-marker:before': {\n    content: \"'●'\",\n    'font-size': '10px'\n  },\n  'point-marker': {\n    position: 'absolute',\n    bottom: '0px'\n  }\n}\nconst bodyStyles = {\n  body: {\n    margin: 0,\n    fontFamily:\n      '-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif',\n    WebkitFontSmoothing: 'antialiased',\n    MozOsxFontSmoothing: 'grayscale'\n  }\n}\nmodule.exports = {\n  bodyStyles,\n  cellStyles,\n  gridStyles,\n  pointStyles\n}\n","import React from 'react'\nimport styles from '../utils/styles'\nimport PropTypes from 'prop-types'\n\nclass Cell extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      allColored: false\n    }\n    this.CellMarkup = this.CellMarkup.bind(this)\n  }\n  renderCells(i) {\n    if (this.props.toRender) {\n      const { toRender } = this.props\n      return toRender.map((obj, i) => {\n        let result\n        switch (this.props.type) {\n          case 'all':\n            result = this.allColorsAddLogic(i)\n            break\n          default:\n            // on first render just run markup\n            result = <this.CellMarkup key={i} id={i} />\n            break\n        }\n        return result\n      })\n    }\n  }\n  allColorsAddLogic(i) {\n    let { allColorCellObj } = this.props\n    // key object key with i\n    return <this.CellMarkup key={i} id={i} color={allColorCellObj[i]} />\n  }\n  addColor(cellObj) {\n    if (cellObj) {\n      return {\n        backgroundColor: cellObj.color\n      }\n    } else {\n      return styles.cellStyles.cell\n    }\n  }\n  CellMarkup(input) {\n    let idStr = `id${input.id}`\n    return (\n      <div\n        style={this.addColor(input.color)}\n        id={idStr}\n        key={input.id}\n        className='cell'\n      />\n    )\n  }\n\n  render() {\n    if (this.props.toRender && this.props.toRender.length) {\n      return <React.Fragment>{this.renderCells()}</React.Fragment>\n    } else {\n      return <div>No Cells yet!</div>\n    }\n  }\n}\nCell.propTypes = {\n  allColorCellObj: PropTypes.object,\n  toRender: PropTypes.array,\n  type: PropTypes.string\n}\nexport default Cell\n","import React from 'react'\nimport styles from '../utils/styles'\n\nfunction Point(props) {\n  if (!props.coordsArrs) return null\n\n  // make string with the pseudo selector to add point icon\n  function injectPseudoIntoHead() {\n    let output = ''\n    const stylesArr = Object.keys(styles.pointStyles)\n    for (let i = 0; i < stylesArr.length; i++) {\n      const j = Object.keys(styles.pointStyles[stylesArr[i]])\n      const k = Object.values(styles.pointStyles[stylesArr[i]])\n\n      output += `.${stylesArr[i]}\\n {`\n      for (let a = 0; a < j.length; a++) {\n        output += ` ${j[a]}: ${k[a]}; `\n      }\n      output += '}\\n\\n'\n    }\n    let styleTag = document.createElement('style')\n    styleTag.type = 'text/css'\n    let node = document.createTextNode(output)\n    styleTag.append(node)\n    let head = document.querySelector('head')\n    head.appendChild(styleTag)\n  }\n  injectPseudoIntoHead()\n\n  let display\n  !props.color ? (display = 'none') : (display = 'block')\n  return props.coordsArrs.map((coord, i) => {\n    let styles = {\n      display: display,\n      color: props.color,\n      [coord.directions.xDir]: coord.pixels.moveX.toString() + 'px',\n      [coord.directions.yDir]: coord.pixels.moveY.toString() + 'px'\n    }\n    return <div className='point-marker' style={styles} key={i} />\n  })\n}\n\nexport default Point\n","var utils = (function() {\n  return {\n    _convertToPixels: function(x, y) {\n      if (!x) {\n        x = 0\n      }\n      if (!y) {\n        y = 0\n      }\n      let totalX\n      let totalY\n      if (x) {\n        x = x - 10\n        totalX = 100 + x * 11\n      } else {\n        totalX = x * 10\n      }\n      if (y) {\n        y = y - 10\n        totalY = 100 + y * 11\n      } else {\n        totalY = y * 10\n      }\n      let moveX = parseInt(totalX)\n      let moveY = parseInt(totalY)\n      let coordsObj = {\n        moveX: moveX,\n        moveY: moveY\n      }\n      return coordsObj\n    },\n    _numToMove: function(x, y, type) {\n      if (type === 'stop') {\n        let moveX = Math.abs(this.state.previousStopX - x)\n        let moveY = Math.abs(this.state.previousStopY - y)\n        return {\n          tempX: moveX,\n          tempY: moveY\n        }\n      } else if (type === 'leg') {\n        let moveX = Math.abs(this.state.previousLegX - x)\n        let moveY = Math.abs(this.state.previousLegY - y)\n        return {\n          tempX: moveX,\n          tempY: moveY\n        }\n      } else {\n        console.error('error in the num to move function')\n      }\n    },\n    _calcStartingCell: function(sizeObj) {\n      // find the corner cell formula is (x * y) - x\n      let startingCellNum =\n        parseInt(sizeObj.x) * parseInt(sizeObj.y) - parseInt(sizeObj.x)\n      return startingCellNum\n    },\n    // make json from the entered plot points\n    _makePlotJson(plotsArr) {\n      return plotsArr.map((coords, i) => {\n        return {\n          name: String.fromCharCode(i + 65),\n          x: coords.x,\n          y: coords.y\n        }\n      })\n    },\n    _Cell(cellNum, color) {\n      this.cellNum = cellNum\n      this.color = color\n    },\n    _makePLotCellObj(cellNum, color, CellFunc) {\n      return new CellFunc(cellNum, color)\n    },\n    _arrOfObjsToArr(arrOfObjs, property) {\n      return arrOfObjs.map(obj => {\n        return obj[property]\n      })\n    }\n  }\n})()\n\nexport default utils\n","import React, { Component } from 'react'\nimport Cell from './Cell.jsx'\nimport Point from './Point.jsx'\nimport utils from '../utils/graph_utils'\nimport gridStyles from '../utils/styles'\nimport PropTypes from 'prop-types'\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      stopsDirsArr: [],\n      allColorsCounter: 0,\n      colorType: '',\n      plotSets: [],\n      gridSets: [],\n      startingCellNumAll: 0,\n      previousStopX: 0,\n      previousStopY: 0,\n      boxesToRender: Array.from({ length: 100 }, (v, i) => i),\n      finalStopColorCellObj: {},\n      finalStopColorCellArr: []\n    }\n  }\n  componentDidMount() {\n    this.createGraph()\n    this.loadPlotDatatoPlotSets()\n    this.loadGridDataintoGridSets()\n  }\n  // make props coords into useable json\n  loadPlotDatatoPlotSets(type) {\n    // load plotsets into state\n    Object.values(this.props.plotSets).forEach(set => {\n      // update with _makePlotJson func\n      set.plots = utils._makePlotJson(set.plots)\n      this.setState(prevState => ({\n        plotSets: [...prevState.plotSets, set]\n      }))\n    })\n  }\n  // set state after color grid runs through a set\n  resetColorGridState() {\n    this.setState({\n      startingCellNumAll: utils._calcStartingCell(this.props.setGraphSize),\n      previousStopX: 0,\n      previousStopY: 0\n    })\n    this.calcRowVariaion()\n  }\n  // use plot json to set stops and make colored grid\n  loadGridDataintoGridSets() {\n    setTimeout(() => {\n      // loop over each obj\n      for (let key in this.state.plotSets) {\n        const plotsArr = this.state.plotSets[key].plots\n        const { lineColor } = this.state.plotSets[key]\n        // get the array inside and set stops\n        this._setStopCoords('stop', plotsArr)\n        const tempGridSet = {\n          gridColorDataObjs: [],\n          gridColorDataObj: {},\n          name: `set${key}`,\n          allColorsCounter: this.state.allColorsCounter,\n          colorType: 'all'\n        }\n        plotsArr.forEach((stop, i) => {\n          const { tempCellNumsArr, tempCellNumsObj } = this.colorGrid(\n            stop.x,\n            stop.y,\n            'all',\n            lineColor,\n            tempGridSet.gridColorDataObj\n          )\n          tempGridSet.gridColorDataObjs = [\n            ...tempGridSet.gridColorDataObjs,\n            ...tempCellNumsArr\n          ]\n          tempGridSet.gridColorDataObj = {\n            ...tempGridSet.gridColorDataObj,\n            ...tempCellNumsObj\n          }\n        })\n        this.setState(prevState => ({\n          gridSets: [...prevState.gridSets, tempGridSet]\n        }))\n        this.resetColorGridState()\n      }\n      this.setState({\n        finalStopColorCellArr: this.makeSingleCellNumArr(),\n        finalStopColorCellObj: this.makeSingleCellNumObj()\n      })\n    })\n  }\n  // combine all color cells into one array\n  makeSingleCellNumArr() {\n    const arr = this.state.gridSets\n      .map(obj => {\n        return obj.gridColorDataObjs\n      })\n      .flat()\n    return arr\n  }\n  // spread all objs into one big one for lookup\n  makeSingleCellNumObj() {\n    let allObjs = {}\n    this.state.gridSets.forEach(obj => {\n      allObjs = { ...allObjs, ...obj.gridColorDataObj }\n    })\n    return allObjs\n  }\n  createGraph() {\n    let that = this\n    // take state of graph and multiple to get num\n    let cells =\n      parseInt(this.props.setGraphSize.x) * parseInt(this.props.setGraphSize.y)\n    if (!cells) {\n      console.error('No cell values')\n      return\n    }\n    that.setState({\n      boxesToRender: Array.from({ length: cells }, (v, i) => i)\n    })\n    setTimeout(() => {\n      this.setState({\n        startingCellNumAll: utils._calcStartingCell(this.props.setGraphSize)\n      })\n      this.calcRowVariaion()\n    })\n  }\n  // takes coords and type - needs access to state\n  _numToMove(x, y, type) {\n    if (type === 'stop') {\n      let moveX = Math.abs(this.state.previousStopX - x)\n      let moveY = Math.abs(this.state.previousStopY - y)\n      return {\n        tempX: moveX,\n        tempY: moveY\n      }\n    } else if (type === 'leg') {\n      let moveX = Math.abs(this.state.previousLegX - x)\n      let moveY = Math.abs(this.state.previousLegY - y)\n      return {\n        tempX: moveX,\n        tempY: moveY\n      }\n    } else {\n      console.error('error in the num to move function')\n    }\n  }\n  // take amount in leg with a percent - returns num to move out of total leg number\n  _percentToCoords(diffObj, percent) {\n    let xNum = Math.floor(diffObj.xDiff * 0.01 * percent)\n    let yNum = Math.floor(diffObj.yDiff * 0.01 * percent)\n    return { xNum, yNum }\n  }\n  // calc num of cells to vertial based on grid size\n  calcRowVariaion() {\n    // formula - move up/down is the same value as x and y\n    this.setState({\n      moveRowCells: parseInt(this.props.setGraphSize.x)\n    })\n  }\n  colorGrid(x, y, type, lineColor, objStore) {\n    // calc num of units to move based on prev position\n    let tempCellNumsArr = []\n    let tempCellNumsObj = {}\n    let tempX = x\n    let tempY = y\n    let tempCellNum\n    let loopAxis\n\n    if (type === 'all') {\n      tempCellNum = this.state.startingCellNumAll\n    }\n    // convert based on next move using above function\n    tempX = this._numToMove(tempX, tempY, 'stop').tempX\n    tempY = this._numToMove(tempX, tempY, 'stop').tempY\n    // on first move on grid only - for bottom corner\n    if (this.state.previousStopX === 0 && this.state.previousStopY === 0) {\n      tempX = tempX - 1\n      tempY = tempY - 1\n      const obj = utils._makePLotCellObj(tempCellNum, lineColor, utils._Cell)\n      tempCellNumsArr.push(obj)\n      tempCellNumsObj[obj.cellNum] = obj\n    }\n    // move in tandem while both vals exist\n    while (tempX && tempY) {\n      // console.log(tempX)\n      // if last was les than current- do this\n      if (this.state.previousStopY < y) {\n        tempCellNum = tempCellNum - this.state.moveRowCells\n        const obj = utils._makePLotCellObj(tempCellNum, lineColor, utils._Cell)\n        tempCellNumsArr.push(obj)\n        tempCellNumsObj[obj.cellNum] = obj\n      } else if (this.state.previousStopY > y) {\n        tempCellNum = tempCellNum + this.state.moveRowCells\n        const obj = utils._makePLotCellObj(tempCellNum, lineColor, utils._Cell)\n        tempCellNumsArr.push(obj)\n        tempCellNumsObj[obj.cellNum] = obj\n      }\n      if (this.state.previousStopX < x) {\n        tempCellNum = tempCellNum + 1\n        const obj = utils._makePLotCellObj(tempCellNum, lineColor, utils._Cell)\n        tempCellNumsArr.push(obj)\n        tempCellNumsObj[obj.cellNum] = obj\n      } else if (this.state.previousStopX > x) {\n        tempCellNum = tempCellNum - 1\n        const obj = utils._makePLotCellObj(tempCellNum, lineColor, utils._Cell)\n        tempCellNumsArr.push(obj)\n        tempCellNumsObj[obj.cellNum] = obj\n      }\n      tempX = tempX - 1\n      tempY = tempY - 1\n    }\n    // axis - loop over the only one left X or Y\n    loopAxis = tempY ? (loopAxis = tempY) : (loopAxis = tempX)\n    // if only on val left, move on its own\n    for (var i = 0; i < loopAxis; i++) {\n      if (tempY) {\n        if (this.state.previousStopY < y) {\n          tempCellNum = tempCellNum - this.state.moveRowCells\n          const obj = utils._makePLotCellObj(\n            tempCellNum,\n            lineColor,\n            utils._Cell\n          )\n          tempCellNumsArr.push(obj)\n          tempCellNumsObj[obj.cellNum] = obj\n        } else if (this.state.previousStopY > y) {\n          tempCellNum = tempCellNum + this.state.moveRowCells\n          const obj = utils._makePLotCellObj(\n            tempCellNum,\n            lineColor,\n            utils._Cell\n          )\n          tempCellNumsArr.push(obj)\n          tempCellNumsObj[obj.cellNum] = obj\n        }\n      } else if (tempX) {\n        if (this.state.previousStopX < x) {\n          tempCellNum = tempCellNum + 1\n          const obj = utils._makePLotCellObj(\n            tempCellNum,\n            lineColor,\n            utils._Cell\n          )\n          tempCellNumsArr.push(obj)\n          tempCellNumsObj[obj.cellNum] = obj\n        } else if (this.state.previousStopX > x) {\n          tempCellNum = tempCellNum - 1\n          const obj = utils._makePLotCellObj(\n            tempCellNum,\n            lineColor,\n            utils._Cell\n          )\n          tempCellNumsArr.push(obj)\n          tempCellNumsObj[obj.cellNum] = obj\n        }\n      }\n    }\n    if (type === 'all') {\n      this.setState({\n        previousStopX: x,\n        previousStopY: y,\n        startingCellNumAll: tempCellNum\n      })\n    }\n    return {\n      tempCellNumsArr,\n      tempCellNumsObj\n    }\n  }\n  combineStyles() {\n    let obj = {\n      ...gridStyles.gridStyles(this.props).graphContainer,\n      ...gridStyles.bodyStyles.body\n    }\n    return obj\n  }\n\n  // set coords in pxs of plots\n  _setStopCoords(type, arr, x, y) {\n    let that = this\n    // filter out undefined\n    if (type === 'stop') {\n      setTimeout(function() {\n        let coordsArr = []\n        if (arr.length > 0) {\n          arr.forEach(stop => {\n            let pixels = utils._convertToPixels(stop.x, stop.y)\n            let coords = {\n              pixels: pixels,\n              directions: {\n                xDir: 'left',\n                yDir: 'bottom'\n              }\n            }\n            coordsArr.push(coords)\n          })\n        }\n        that.setState(prevState => ({\n          stopsDirsArr: [...prevState.stopsDirsArr, coordsArr]\n        }))\n      })\n    } else if (type === 'driver') {\n      let pixels = utils._convertToPixels(x, y)\n      let coords = {\n        pixels: pixels,\n        directions: {\n          xDir: 'left',\n          yDir: 'bottom'\n        }\n      }\n      return coords\n    }\n  }\n  render() {\n    return (\n      <main className='graph-container' style={this.combineStyles()}>\n        <div className='graph' style={gridStyles.gridStyles(this.props).graph}>\n          {' '}\n          {this.state.plotSets.map((instance, i) => {\n            return (\n              <Point\n                key={i}\n                color={instance ? instance.plotColor : null}\n                coordsArrs={this.state.stopsDirsArr[i]}\n              />\n            )\n          })}{' '}\n          <Cell\n            toRender={this.state.boxesToRender}\n            allColorCellArr={\n              !this.state.finalStopColorCellArr\n                ? null\n                : this.state.finalStopColorCellArr\n            }\n            allColorCellObj={\n              !this.state.finalStopColorCellObj\n                ? null\n                : this.state.finalStopColorCellObj\n            }\n            type='all'\n          />{' '}\n        </div>\n      </main>\n    )\n  }\n}\nGraph.propTypes = {\n  plotSets: PropTypes.object,\n  setGraphSize: PropTypes.object\n}\n\nexport default Graph\n"],"names":["gridStyles","props","setGraphSize","y","x","cellStyles","pointStyles","bodyStyles","module","Cell","state","CellMarkup","bind","i","toRender","map","obj","result","type","allColorsAddLogic","React","allColorCellObj","cellObj","color","styles","cell","input","idStr","id","addColor","length","renderCells","Component","propTypes","PropTypes","object","array","string","Point","coordsArrs","injectPseudoIntoHead","output","stylesArr","Object","keys","j","k","values","a","styleTag","document","createElement","node","createTextNode","append","head","querySelector","appendChild","display","coord","directions","xDir","pixels","moveX","toString","yDir","moveY","utils","totalX","totalY","parseInt","coordsObj","Math","abs","previousStopX","previousStopY","previousLegX","previousLegY","error","sizeObj","startingCellNum","plotsArr","coords","String","fromCharCode","cellNum","CellFunc","arrOfObjs","property","Graph","Array","from","v","createGraph","loadPlotDatatoPlotSets","loadGridDataintoGridSets","plotSets","forEach","plots","_makePlotJson","set","setState","prevState","_calcStartingCell","calcRowVariaion","key","lineColor","_setStopCoords","tempGridSet","allColorsCounter","stop","colorGrid","gridColorDataObj","tempCellNumsArr","tempCellNumsObj","gridColorDataObjs","gridSets","resetColorGridState","makeSingleCellNumArr","makeSingleCellNumObj","arr","flat","allObjs","that","cells","diffObj","percent","xNum","floor","xDiff","yNum","yDiff","objStore","tempX","tempY","tempCellNum","loopAxis","startingCellNumAll","_numToMove","_makePLotCellObj","_Cell","push","moveRowCells","graphContainer","body","coordsArr","_convertToPixels","stopsDirsArr","combineStyles","graph","instance","plotColor","boxesToRender","finalStopColorCellArr","finalStopColorCellObj"],"mappings":"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"}