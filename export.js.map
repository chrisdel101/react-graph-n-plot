{"version":3,"file":"export.js","sources":["src/utils/graph_utils.js","src/utils/styles.js","src/components/Cell.jsx","src/components/Point.jsx","src/components/Graph.jsx"],"sourcesContent":["var utils = (function() {\n  return {\n    _convertToPixels: function(x, y) {\n      if (!x) {\n        x = 0\n      }\n      if (!y) {\n        y = 0\n      }\n      let totalX\n      let totalY\n      if (x) {\n        x = x - 10\n        totalX = 100 + x * 11\n      } else {\n        totalX = x * 10\n      }\n      if (y) {\n        y = y - 10\n        totalY = 100 + y * 11\n      } else {\n        totalY = y * 10\n      }\n      let moveX = parseInt(totalX)\n      let moveY = parseInt(totalY)\n      let coordsObj = {\n        moveX: moveX,\n        moveY: moveY\n      }\n      return coordsObj\n    },\n    _numToMove: function(x, y, type) {\n      if (type === 'stop') {\n        let moveX = Math.abs(this.state.previousStopX - x)\n        let moveY = Math.abs(this.state.previousStopY - y)\n        return {\n          tempX: moveX,\n          tempY: moveY\n        }\n      } else if (type === 'leg') {\n        let moveX = Math.abs(this.state.previousLegX - x)\n        let moveY = Math.abs(this.state.previousLegY - y)\n        return {\n          tempX: moveX,\n          tempY: moveY\n        }\n      } else {\n        console.error('error in the num to move function')\n      }\n    },\n    _calcStartingCell: function(sizeObj) {\n      // find the corner cell formula is (x * y) - x\n      let startingCellNum =\n        parseInt(sizeObj.x) * parseInt(sizeObj.y) - parseInt(sizeObj.x)\n      return startingCellNum\n    },\n    // takes 2 objs of coords and determines the diff\n    _absDiff: function(firstCoordsObj, secondCoordsObj) {\n      let xDiff = Math.abs(firstCoordsObj.x - secondCoordsObj.x)\n      let yDiff = Math.abs(firstCoordsObj.y - secondCoordsObj.y)\n      return {\n        xDiff,\n        yDiff\n      }\n    },\n    _getDriverCoords: function(firstLegStopObj, lastLegStopObj, numToMoveObj) {\n      let x1 = firstLegStopObj.x\n      let x2 = lastLegStopObj.x\n      let y1 = firstLegStopObj.y\n      let y2 = lastLegStopObj.y\n      let xNum = numToMoveObj.xNum\n      let yNum = numToMoveObj.yNum\n      // if x moves up, add\n      let xToMove\n      let yToMove\n      if (x1 < x2) {\n        xToMove = x1 + xNum\n      } else if (x1 >= x2) {\n        xToMove = x1 - xNum\n      } else {\n        console.error('error in driver movement')\n      }\n      if (y1 < y2) {\n        yToMove = y1 + yNum\n      } else if (y1 >= y2) {\n        yToMove = y1 - yNum\n      } else {\n        console.error('error in driver movement')\n      }\n      return {\n        x: xToMove,\n        y: yToMove\n      }\n    },\n    // take amount in leg with a percent - returns num to move out of total leg number\n    _percentToCoords: function(diffObj, percent) {\n      let xNum = Math.floor(diffObj.xDiff * 0.01 * percent)\n      let yNum = Math.floor(diffObj.yDiff * 0.01 * percent)\n      return { xNum, yNum }\n    },\n    // takes first stop obj, driver coords obj, and abs diff of a single stops axis\n    _findPercentFromDriverCoords(firstStop, driverCoords, yAbsDiff, xAbsDiff) {\n      let x1 = parseInt(firstStop.x)\n      let y1 = parseInt(firstStop.y)\n      let x2 = parseInt(driverCoords.x)\n      let y2 = parseInt(driverCoords.y)\n\n      let xDiff\n      let yDiff\n\n      // find number moved from last stop\n      if (x1 < x2) {\n        xDiff = x2 - x1\n      } else if (x1 > x2) {\n        xDiff = x1 - x2\n      } else if (x1 === x2) {\n        xDiff = 0\n      } else {\n        console.error('error in driver movement')\n      }\n      if (y1 < y2) {\n        yDiff = y2 - y1\n      } else if (y1 > y2) {\n        yDiff = y1 - y2\n      } else if (y1 === y2) {\n        yDiff = 0\n      } else {\n        console.error('error in driver movement')\n      }\n\n      // divide number moved so far in leg by total number in leg\n      let xPercent\n      let yPercent\n      // check for zero vals\n      if (xDiff === 0) {\n        xPercent = 0\n      }\n      if (yDiff === 0) {\n        yPercent = 0\n      }\n      if (xDiff && xDiff !== 0) {\n        xPercent = xDiff / xAbsDiff\n      }\n      if (yDiff && yDiff !== 0) {\n        yPercent = yDiff / yAbsDiff\n      }\n      // let finalPercent\n\n      // if one val is missing use the other alone\n      if (!xPercent || !yPercent) {\n        if (xPercent) {\n          return xPercent * 100\n        } else if (yPercent) {\n          return yPercent * 100\n        }\n      }\n      // it both are zero then zero percent\n      if (xPercent === 0 && yPercent === 0) {\n        return 0\n      }\n\n      // use the larger leg to updaet val - TODO: make both percents equal so driver fits back into grid\n      if (xAbsDiff > yAbsDiff) {\n        return xPercent\n      } else if (xAbsDiff < yAbsDiff) {\n        return yPercent\n        // if equal use the larger percent\n      } else if (xAbsDiff === yAbsDiff) {\n        if (xPercent >= yPercent) {\n          return xPercent\n        } else {\n          return yPercent\n        }\n      } else {\n        console.error('An error occured in the percentage calcs')\n      }\n    },\n    // make json from the entered plot points\n    _makePlotJson(plotsArr) {\n      return plotsArr.map((coords, i) => {\n        return {\n          name: String.fromCharCode(i + 65),\n          x: coords.x,\n          y: coords.y\n        }\n      })\n    },\n    _toggleState(currentState) {\n      if (!currentState) {\n        return true\n      } else {\n        return false\n      }\n    },\n    _Cell(cellNum, color) {\n      this.cellNum = cellNum\n      this.color = color\n    },\n    _makePLotCellObj(cellNum, color, CellFunc) {\n      return new CellFunc(cellNum, color)\n    },\n    _arrOfObjsToArr(arrOfObjs, property) {\n      return arrOfObjs.map(obj => {\n        return obj[property]\n      })\n    }\n  }\n})()\n\nexport default utils\n","const gridStyles = function(props) {\n  return {\n    graphContainer: {\n      display: 'flex',\n      position: 'relative',\n      bottom: '0px'\n    },\n    graph: {\n      display: 'grid',\n      border: '1px solid black',\n      gridGap: '1px',\n      backgroundColor: 'black',\n      gridTemplateRows: `repeat(${props.setGraphSize.y}, 10px)`,\n      gridTemplateColumns: `repeat(${props.setGraphSize.x}, 10px)`\n    }\n  }\n}\nconst cellStyles = {\n  cell: {\n    width: '100%',\n    height: '100%',\n    backgroundColor: '#fff'\n  }\n}\nconst pointStyles = {\n  'point-marker:before': {\n    content: \"'●'\",\n    'font-size': '10px'\n  },\n  'point-marker': {\n    position: 'absolute',\n    bottom: '0px'\n  }\n}\nconst bodyStyles = {\n  body: {\n    margin: 0,\n    fontFamily:\n      '-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif',\n    WebkitFontSmoothing: 'antialiased',\n    MozOsxFontSmoothing: 'grayscale'\n  }\n}\nmodule.exports = {\n  bodyStyles,\n  cellStyles,\n  gridStyles,\n  pointStyles\n}\n","import React from 'react'\nimport utils from '../utils/graph_utils'\nimport styles from '../utils/styles'\n\n// takes the num of boxes/cells to be produced\nclass Cell extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      allColored: false,\n      legColored: false,\n      completeColored: false,\n      allColorsCounter: 0,\n      legColorsCounter: 0,\n      completedColorsCounter: 0,\n      previousLegIndex: '',\n      cellsMounted: {},\n      cellNumsArr: [],\n      testArr: ['one', 'two', 'three']\n    }\n    this.CellMarkup = this.CellMarkup.bind(this)\n  }\n  renderCells(i) {\n    // console.log(this.props.gridColors)\n    if (this.props.toRender) {\n      const { toRender } = this.props\n      return toRender.map((obj, i) => {\n        let result\n        switch (this.props.type) {\n          case 'all':\n            if (!this.state.allColored) {\n              result = this.allColorsRemoveLogic(i)\n            } else if (this.state.allColored) {\n              result = this.allColorsAddLogic(i)\n            }\n            break\n          case 'leg':\n            if (!this.state.legColored) {\n              result = this.legColorsRemoveLogic(i)\n            } else if (this.state.legColored) {\n              result = this.legColorsAddLogic(i)\n            }\n            break\n          case 'complete':\n            if (!this.state.completeColored) {\n              result = this.completedColorsRemoveLogic(i)\n            } else if (this.state.completeColored) {\n              result = this.completedColorsAddLogic(i)\n            }\n            break\n          default:\n            // on first render just run markup\n            result = <this.CellMarkup key={i} id={i} />\n            break\n        }\n        return result\n      })\n    }\n  }\n  toggleColor(type) {\n    if (type === 'all') {\n      // console.log('opposite', this.state.allColored)\n      this.setState({\n        allColored: utils._toggleState(this.state.allColored)\n      })\n      // console.log(this.state.allColored)\n    } else if (type === 'leg') {\n      console.log('opposite', this.state.legColored)\n      this.setState({\n        legColored: utils._toggleState(this.state.legColored)\n      })\n    } else if (type === 'complete') {\n      console.log('opposite', this.state.completeColored)\n      this.setState({\n        completeColored: utils._toggleState(this.state.completeColored)\n      })\n    }\n  }\n  allColorsRemoveLogic(i) {\n    let { gridColors } = this.props\n    let hasStopColor = (() => {\n      if (gridColors && gridColors.includes(i)) return false\n    })()\n    return <this.CellMarkup hasStopColor={hasStopColor} key={i} id={i} />\n  }\n  legColorsAddLogic(i) {\n    let { legsColor } = this.props\n    legsColor = legsColor.leg\n    let hasLegColor = (() => {\n      if (!legsColor || !legsColor.length || !legsColor.includes(i)) {\n        return false\n      }\n      return true\n    })()\n    return <this.CellMarkup hasLegColor={hasLegColor} key={i} id={i} />\n  }\n  legColorsRemoveLogic(i) {\n    let { legsColor } = this.props\n    legsColor = legsColor.leg\n    let hasLegColor = (() => {\n      if (legsColor && legsColor.includes(i)) return false\n    })()\n    return <this.CellMarkup hasLegColor={hasLegColor} key={i} id={i} />\n  }\n  completedColorsAddLogic(i) {\n    let { completeColor } = this.props\n    let hasCompletionColor = (() => {\n      if (\n        !completeColor ||\n        !completeColor.length ||\n        !completeColor.includes(i)\n      ) {\n        return false\n      }\n      return true\n    })()\n    return (\n      <this.CellMarkup hasCompletionColor={hasCompletionColor} key={i} id={i} />\n    )\n  }\n  completedColorsRemoveLogic(i) {\n    let { completeColor } = this.props\n    let hasCompletionColor = (() => {\n      if (completeColor && completeColor.includes(i)) return false\n    })()\n    return (\n      <this.CellMarkup hasCompletionColor={hasCompletionColor} key={i} id={i} />\n    )\n  }\n  allColorsAddLogic(i) {\n    let { allColorCellObj } = this.props\n    // key object key with i\n    return <this.CellMarkup key={i} id={i} color={allColorCellObj[i]} />\n  }\n  combineStyles(cellObj) {\n    if (!this.state.styles) return\n    // console.log(this.state.styles)\n    const lineColor = this.addColor(cellObj)\n    let allStyle = { ...this.state.styles, ...lineColor }\n    return allStyle\n  }\n  addColor(cellObj) {\n    if (cellObj) {\n      return {\n        backgroundColor: cellObj.color\n      }\n    } else {\n      return styles.cellStyles.cell\n    }\n  }\n  CellMarkup(input) {\n    let idStr = `id${input.id}`\n    // console.log()\n    return (\n      <div\n        style={this.addColor(input.color)}\n        id={idStr}\n        key={input.id}\n        className='cell'\n      />\n    )\n  }\n  componentDidMount() {\n    this.setState({\n      styles\n    })\n    this.toggleColor('all')\n    // get arr of all cell nums\n  }\n  render() {\n    if (this.props.toRender && this.props.toRender.length) {\n      return <React.Fragment>{this.renderCells()}</React.Fragment>\n    } else {\n      return <div>No Cells yet!</div>\n    }\n  }\n}\n\nexport default Cell\n","import React from 'react'\nimport styles from '../utils/styles'\n\n// takes and array of directions and pixes for x and y\nfunction Point(props) {\n  if (!props.coordsArrs) return null\n\n  // make string with the pseudo selector to add point icon\n  function injectIntoHead() {\n    let output = ''\n    const stylesArr = Object.keys(styles.pointStyles)\n    for (let i = 0; i < stylesArr.length; i++) {\n      const j = Object.keys(styles.pointStyles[stylesArr[i]])\n      const k = Object.values(styles.pointStyles[stylesArr[i]])\n\n      output += `.${stylesArr[i]}\\n {`\n      for (let a = 0; a < j.length; a++) {\n        output += ` ${j[a]}: ${k[a]}; `\n      }\n      output += '}\\n\\n'\n    }\n    let styleTag = document.createElement('style')\n    styleTag.type = 'text/css'\n    let node = document.createTextNode(output)\n    styleTag.append(node)\n    let head = document.querySelector('head')\n    head.appendChild(styleTag)\n  }\n  injectIntoHead()\n\n  let display\n  !props.color ? (display = 'none') : (display = 'block')\n  return props.coordsArrs.map((coord, i) => {\n    let styles = {\n      display: display,\n      color: props.color,\n      [coord.directions.xDir]: coord.pixels.moveX.toString() + 'px',\n      [coord.directions.yDir]: coord.pixels.moveY.toString() + 'px'\n    }\n    return <div className='point-marker' style={styles} key={i} />\n  })\n}\n\nexport default Point\n","import React, { Component } from 'react'\nimport Cell from './Cell.jsx'\nimport Point from './Point.jsx'\nimport utils from '../utils/graph_utils'\nimport gridStyles from '../utils/styles'\nimport PropTypes from 'prop-types'\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      stopsDirsArr: [],\n      allColorsCounter: 0,\n      colorType: '',\n      plotSets: [],\n      gridSets: [],\n      startingCellNumAll: 0,\n      previousStopX: 0,\n      previousStopY: 0,\n      boxesToRender: Array.from({ length: 100 }, (v, i) => i),\n      finalStopColorCellObj: {},\n      finalStopColorCellArr: []\n    }\n  }\n  componentDidMount() {\n    this.createGraph()\n    this.loadPlotDatatoPlotSets()\n    this.loadGridDataintoGridSets()\n  }\n  // make props coords into useable json\n  loadPlotDatatoPlotSets(type) {\n    // load plotsets into state\n    Object.values(this.props.plotSets).forEach(set => {\n      // update with _makePlotJson func\n      set.plots = utils._makePlotJson(set.plots)\n      this.setState(prevState => ({\n        plotSets: [...prevState.plotSets, set]\n      }))\n    })\n  }\n  // set state after color grid runs through a set\n  resetColorGridState() {\n    this.setState({\n      startingCellNumAll: utils._calcStartingCell(this.props.setGraphSize),\n      previousStopX: 0,\n      previousStopY: 0\n    })\n    this.calcRowVariaion()\n  }\n  // use plot json to set stops and make colored grid\n  loadGridDataintoGridSets() {\n    setTimeout(() => {\n      // loop over each obj\n      for (let key in this.state.plotSets) {\n        const plotsArr = this.state.plotSets[key].plots\n        const { lineColor } = this.state.plotSets[key]\n        // get the array inside and set stops\n        this._setStopCoords('stop', plotsArr)\n        const tempGridSet = {\n          gridColorDataObjs: [],\n          gridColorDataObj: {},\n          name: `set${key}`,\n          allColorsCounter: this.state.allColorsCounter,\n          colorType: 'all'\n        }\n        plotsArr.forEach((stop, i) => {\n          const { tempCellNumsArr, tempCellNumsObj } = this.colorGrid(\n            stop.x,\n            stop.y,\n            'all',\n            lineColor,\n            tempGridSet.gridColorDataObj\n          )\n          tempGridSet.gridColorDataObjs = [\n            ...tempGridSet.gridColorDataObjs,\n            ...tempCellNumsArr\n          ]\n          tempGridSet.gridColorDataObj = {\n            ...tempGridSet.gridColorDataObj,\n            ...tempCellNumsObj\n          }\n        })\n        this.setState(prevState => ({\n          gridSets: [...prevState.gridSets, tempGridSet]\n        }))\n        this.resetColorGridState()\n      }\n      this.setState({\n        finalStopColorCellArr: this.makeSingleCellNumArr(),\n        finalStopColorCellObj: this.makeSingleCellNumObj()\n      })\n    })\n  }\n  // combine all color cells into one array\n  makeSingleCellNumArr() {\n    const arr = this.state.gridSets\n      .map(obj => {\n        return obj.gridColorDataObjs\n      })\n      .flat()\n    return arr\n  }\n  // spread all objs into one big one for lookup\n  makeSingleCellNumObj() {\n    let allObjs = {}\n    this.state.gridSets.forEach(obj => {\n      allObjs = { ...allObjs, ...obj.gridColorDataObj }\n    })\n    return allObjs\n  }\n  createGraph() {\n    let that = this\n    // take state of graph and multiple to get num\n    let cells =\n      parseInt(this.props.setGraphSize.x) * parseInt(this.props.setGraphSize.y)\n    if (!cells) {\n      console.error('No cell values')\n      return\n    }\n    that.setState({\n      boxesToRender: Array.from({ length: cells }, (v, i) => i)\n    })\n    setTimeout(() => {\n      this.setState({\n        startingCellNumAll: utils._calcStartingCell(this.props.setGraphSize)\n      })\n      this.calcRowVariaion()\n    })\n  }\n  // takes coords and type - needs access to state\n  _numToMove(x, y, type) {\n    if (type === 'stop') {\n      let moveX = Math.abs(this.state.previousStopX - x)\n      let moveY = Math.abs(this.state.previousStopY - y)\n      return {\n        tempX: moveX,\n        tempY: moveY\n      }\n    } else if (type === 'leg') {\n      let moveX = Math.abs(this.state.previousLegX - x)\n      let moveY = Math.abs(this.state.previousLegY - y)\n      return {\n        tempX: moveX,\n        tempY: moveY\n      }\n    } else {\n      console.error('error in the num to move function')\n    }\n  }\n  // take amount in leg with a percent - returns num to move out of total leg number\n  _percentToCoords(diffObj, percent) {\n    let xNum = Math.floor(diffObj.xDiff * 0.01 * percent)\n    let yNum = Math.floor(diffObj.yDiff * 0.01 * percent)\n    return { xNum, yNum }\n  }\n  // calc num of cells to vertial based on grid size\n  calcRowVariaion() {\n    // formula - move up/down is the same value as x and y\n    this.setState({\n      moveRowCells: parseInt(this.props.setGraphSize.x)\n    })\n  }\n  colorGrid(x, y, type, lineColor, objStore) {\n    // calc num of units to move based on prev position\n    let tempCellNumsArr = []\n    let tempCellNumsObj = {}\n    let tempX = x\n    let tempY = y\n    let tempCellNum\n    let loopAxis\n\n    if (type === 'all') {\n      tempCellNum = this.state.startingCellNumAll\n    }\n    // convert based on next move using above function\n    tempX = this._numToMove(tempX, tempY, 'stop').tempX\n    tempY = this._numToMove(tempX, tempY, 'stop').tempY\n    // on first move on grid only - for bottom corner\n    if (this.state.previousStopX === 0 && this.state.previousStopY === 0) {\n      tempX = tempX - 1\n      tempY = tempY - 1\n      const obj = utils._makePLotCellObj(tempCellNum, lineColor, utils._Cell)\n      tempCellNumsArr.push(obj)\n      tempCellNumsObj[obj.cellNum] = obj\n    }\n    // move in tandem while both vals exist\n    while (tempX && tempY) {\n      // console.log(tempX)\n      // if last was les than current- do this\n      if (this.state.previousStopY < y) {\n        tempCellNum = tempCellNum - this.state.moveRowCells\n        const obj = utils._makePLotCellObj(tempCellNum, lineColor, utils._Cell)\n        tempCellNumsArr.push(obj)\n        tempCellNumsObj[obj.cellNum] = obj\n      } else if (this.state.previousStopY > y) {\n        tempCellNum = tempCellNum + this.state.moveRowCells\n        const obj = utils._makePLotCellObj(tempCellNum, lineColor, utils._Cell)\n        tempCellNumsArr.push(obj)\n        tempCellNumsObj[obj.cellNum] = obj\n      }\n      if (this.state.previousStopX < x) {\n        tempCellNum = tempCellNum + 1\n        const obj = utils._makePLotCellObj(tempCellNum, lineColor, utils._Cell)\n        tempCellNumsArr.push(obj)\n        tempCellNumsObj[obj.cellNum] = obj\n      } else if (this.state.previousStopX > x) {\n        tempCellNum = tempCellNum - 1\n        const obj = utils._makePLotCellObj(tempCellNum, lineColor, utils._Cell)\n        tempCellNumsArr.push(obj)\n        tempCellNumsObj[obj.cellNum] = obj\n      }\n      tempX = tempX - 1\n      tempY = tempY - 1\n    }\n    // axis - loop over the only one left X or Y\n    loopAxis = tempY ? (loopAxis = tempY) : (loopAxis = tempX)\n    // if only on val left, move on its own\n    for (var i = 0; i < loopAxis; i++) {\n      if (tempY) {\n        if (this.state.previousStopY < y) {\n          tempCellNum = tempCellNum - this.state.moveRowCells\n          const obj = utils._makePLotCellObj(\n            tempCellNum,\n            lineColor,\n            utils._Cell\n          )\n          tempCellNumsArr.push(obj)\n          tempCellNumsObj[obj.cellNum] = obj\n        } else if (this.state.previousStopY > y) {\n          tempCellNum = tempCellNum + this.state.moveRowCells\n          const obj = utils._makePLotCellObj(\n            tempCellNum,\n            lineColor,\n            utils._Cell\n          )\n          tempCellNumsArr.push(obj)\n          tempCellNumsObj[obj.cellNum] = obj\n        }\n      } else if (tempX) {\n        if (this.state.previousStopX < x) {\n          tempCellNum = tempCellNum + 1\n          const obj = utils._makePLotCellObj(\n            tempCellNum,\n            lineColor,\n            utils._Cell\n          )\n          tempCellNumsArr.push(obj)\n          tempCellNumsObj[obj.cellNum] = obj\n        } else if (this.state.previousStopX > x) {\n          tempCellNum = tempCellNum - 1\n          const obj = utils._makePLotCellObj(\n            tempCellNum,\n            lineColor,\n            utils._Cell\n          )\n          tempCellNumsArr.push(obj)\n          tempCellNumsObj[obj.cellNum] = obj\n        }\n      }\n    }\n    if (type === 'all') {\n      this.setState({\n        previousStopX: x,\n        previousStopY: y,\n        startingCellNumAll: tempCellNum\n      })\n    }\n    return {\n      tempCellNumsArr,\n      tempCellNumsObj\n    }\n  }\n  combineStyles() {\n    console.log('DB', gridStyles.bodyStyles.body)\n    let obj = {\n      ...gridStyles.gridStyles(this.props).graphContainer,\n      ...gridStyles.bodyStyles.body\n    }\n    return obj\n  }\n\n  // set coords in pxs of plots\n  _setStopCoords(type, arr, x, y) {\n    let that = this\n    // filter out undefined\n    if (type === 'stop') {\n      setTimeout(function() {\n        let coordsArr = []\n        if (arr.length > 0) {\n          arr.forEach(stop => {\n            let pixels = utils._convertToPixels(stop.x, stop.y)\n            let coords = {\n              pixels: pixels,\n              directions: {\n                xDir: 'left',\n                yDir: 'bottom'\n              }\n            }\n            coordsArr.push(coords)\n          })\n        }\n        that.setState(prevState => ({\n          stopsDirsArr: [...prevState.stopsDirsArr, coordsArr]\n        }))\n      })\n    } else if (type === 'driver') {\n      let pixels = utils._convertToPixels(x, y)\n      let coords = {\n        pixels: pixels,\n        directions: {\n          xDir: 'left',\n          yDir: 'bottom'\n        }\n      }\n      return coords\n    }\n  }\n  render() {\n    return (\n      <main className='graph-container' style={this.combineStyles()}>\n        <div className='graph' style={gridStyles.gridStyles(this.props).graph}>\n          {' '}\n          {this.state.plotSets.map((instance, i) => {\n            return (\n              <Point\n                key={i}\n                color={instance ? instance.plotColor : null}\n                coordsArrs={this.state.stopsDirsArr[i]}\n              />\n            )\n          })}{' '}\n          <Cell\n            toRender={this.state.boxesToRender}\n            allColorCellArr={\n              !this.state.finalStopColorCellArr\n                ? null\n                : this.state.finalStopColorCellArr\n            }\n            allColorCellObj={\n              !this.state.finalStopColorCellObj\n                ? null\n                : this.state.finalStopColorCellObj\n            }\n            type='all'\n          />{' '}\n        </div>\n      </main>\n    )\n  }\n}\nGraph.propTypes = {\n  plotSets: PropTypes.object,\n  setGraphSize: PropTypes.object\n}\n\nexport default Graph\n"],"names":["utils","x","y","totalX","totalY","moveX","parseInt","moveY","coordsObj","type","Math","abs","state","previousStopX","previousStopY","previousLegX","previousLegY","error","sizeObj","startingCellNum","firstCoordsObj","secondCoordsObj","xDiff","yDiff","firstLegStopObj","lastLegStopObj","numToMoveObj","x1","x2","y1","y2","xNum","yNum","xToMove","yToMove","diffObj","percent","floor","firstStop","driverCoords","yAbsDiff","xAbsDiff","xPercent","yPercent","plotsArr","map","coords","i","String","fromCharCode","currentState","cellNum","color","CellFunc","arrOfObjs","property","obj","gridStyles","props","setGraphSize","cellStyles","pointStyles","bodyStyles","module","Cell","CellMarkup","bind","toRender","result","allColored","allColorsRemoveLogic","allColorsAddLogic","legColored","legColorsRemoveLogic","legColorsAddLogic","completeColored","completedColorsRemoveLogic","completedColorsAddLogic","React","setState","_toggleState","log","gridColors","hasStopColor","includes","legsColor","leg","hasLegColor","length","completeColor","hasCompletionColor","allColorCellObj","cellObj","styles","lineColor","addColor","allStyle","cell","input","idStr","id","toggleColor","renderCells","Component","Point","coordsArrs","injectIntoHead","output","stylesArr","Object","keys","j","k","values","a","styleTag","document","createElement","node","createTextNode","append","head","querySelector","appendChild","display","coord","directions","xDir","pixels","toString","yDir","Graph","Array","from","v","createGraph","loadPlotDatatoPlotSets","loadGridDataintoGridSets","plotSets","forEach","plots","_makePlotJson","set","prevState","_calcStartingCell","calcRowVariaion","key","_setStopCoords","tempGridSet","allColorsCounter","stop","colorGrid","gridColorDataObj","tempCellNumsArr","tempCellNumsObj","gridColorDataObjs","gridSets","resetColorGridState","makeSingleCellNumArr","makeSingleCellNumObj","arr","flat","allObjs","that","cells","objStore","tempX","tempY","tempCellNum","loopAxis","startingCellNumAll","_numToMove","_makePLotCellObj","_Cell","push","moveRowCells","body","graphContainer","coordsArr","_convertToPixels","stopsDirsArr","combineStyles","graph","instance","plotColor","boxesToRender","finalStopColorCellArr","finalStopColorCellObj","propTypes","PropTypes","object"],"mappings":";;;;;;;;AAAA,IAAIA,QAAS,YAAW;SACf;sBACa,0BAASC,CAAT,EAAYC,CAAZ,EAAe;UAC3B,CAACD,CAAL,EAAQ;YACF,CAAJ;;UAEE,CAACC,CAAL,EAAQ;YACF,CAAJ;;UAEEC,eAAJ;UACIC,eAAJ;UACIH,CAAJ,EAAO;YACDA,IAAI,EAAR;iBACS,MAAMA,IAAI,EAAnB;OAFF,MAGO;iBACIA,IAAI,EAAb;;UAEEC,CAAJ,EAAO;YACDA,IAAI,EAAR;iBACS,MAAMA,IAAI,EAAnB;OAFF,MAGO;iBACIA,IAAI,EAAb;;UAEEG,QAAQC,SAASH,MAAT,CAAZ;UACII,QAAQD,SAASF,MAAT,CAAZ;UACII,YAAY;eACPH,KADO;eAEPE;OAFT;aAIOC,SAAP;KA5BG;gBA8BO,oBAASP,CAAT,EAAYC,CAAZ,EAAeO,IAAf,EAAqB;UAC3BA,SAAS,MAAb,EAAqB;YACfJ,QAAQK,KAAKC,GAAL,CAAS,KAAKC,KAAL,CAAWC,aAAX,GAA2BZ,CAApC,CAAZ;YACIM,QAAQG,KAAKC,GAAL,CAAS,KAAKC,KAAL,CAAWE,aAAX,GAA2BZ,CAApC,CAAZ;eACO;iBACEG,KADF;iBAEEE;SAFT;OAHF,MAOO,IAAIE,SAAS,KAAb,EAAoB;YACrBJ,SAAQK,KAAKC,GAAL,CAAS,KAAKC,KAAL,CAAWG,YAAX,GAA0Bd,CAAnC,CAAZ;YACIM,SAAQG,KAAKC,GAAL,CAAS,KAAKC,KAAL,CAAWI,YAAX,GAA0Bd,CAAnC,CAAZ;eACO;iBACEG,MADF;iBAEEE;SAFT;OAHK,MAOA;gBACGU,KAAR,CAAc,mCAAd;;KA9CC;uBAiDc,2BAASC,OAAT,EAAkB;;UAE/BC,kBACFb,SAASY,QAAQjB,CAAjB,IAAsBK,SAASY,QAAQhB,CAAjB,CAAtB,GAA4CI,SAASY,QAAQjB,CAAjB,CAD9C;aAEOkB,eAAP;KArDG;;cAwDK,kBAASC,cAAT,EAAyBC,eAAzB,EAA0C;UAC9CC,QAAQZ,KAAKC,GAAL,CAASS,eAAenB,CAAf,GAAmBoB,gBAAgBpB,CAA5C,CAAZ;UACIsB,QAAQb,KAAKC,GAAL,CAASS,eAAelB,CAAf,GAAmBmB,gBAAgBnB,CAA5C,CAAZ;aACO;oBAAA;;OAAP;KA3DG;sBAgEa,0BAASsB,eAAT,EAA0BC,cAA1B,EAA0CC,YAA1C,EAAwD;UACpEC,KAAKH,gBAAgBvB,CAAzB;UACI2B,KAAKH,eAAexB,CAAxB;UACI4B,KAAKL,gBAAgBtB,CAAzB;UACI4B,KAAKL,eAAevB,CAAxB;UACI6B,OAAOL,aAAaK,IAAxB;UACIC,OAAON,aAAaM,IAAxB;;UAEIC,gBAAJ;UACIC,gBAAJ;UACIP,KAAKC,EAAT,EAAa;kBACDD,KAAKI,IAAf;OADF,MAEO,IAAIJ,MAAMC,EAAV,EAAc;kBACTD,KAAKI,IAAf;OADK,MAEA;gBACGd,KAAR,CAAc,0BAAd;;UAEEY,KAAKC,EAAT,EAAa;kBACDD,KAAKG,IAAf;OADF,MAEO,IAAIH,MAAMC,EAAV,EAAc;kBACTD,KAAKG,IAAf;OADK,MAEA;gBACGf,KAAR,CAAc,0BAAd;;aAEK;WACFgB,OADE;WAEFC;OAFL;KAxFG;;sBA8Fa,0BAASC,OAAT,EAAkBC,OAAlB,EAA2B;UACvCL,OAAOrB,KAAK2B,KAAL,CAAWF,QAAQb,KAAR,GAAgB,IAAhB,GAAuBc,OAAlC,CAAX;UACIJ,OAAOtB,KAAK2B,KAAL,CAAWF,QAAQZ,KAAR,GAAgB,IAAhB,GAAuBa,OAAlC,CAAX;aACO,EAAEL,UAAF,EAAQC,UAAR,EAAP;KAjGG;;gCAAA,wCAoGwBM,SApGxB,EAoGmCC,YApGnC,EAoGiDC,QApGjD,EAoG2DC,QApG3D,EAoGqE;UACpEd,KAAKrB,SAASgC,UAAUrC,CAAnB,CAAT;UACI4B,KAAKvB,SAASgC,UAAUpC,CAAnB,CAAT;UACI0B,KAAKtB,SAASiC,aAAatC,CAAtB,CAAT;UACI6B,KAAKxB,SAASiC,aAAarC,CAAtB,CAAT;;UAEIoB,cAAJ;UACIC,cAAJ;;;UAGII,KAAKC,EAAT,EAAa;gBACHA,KAAKD,EAAb;OADF,MAEO,IAAIA,KAAKC,EAAT,EAAa;gBACVD,KAAKC,EAAb;OADK,MAEA,IAAID,OAAOC,EAAX,EAAe;gBACZ,CAAR;OADK,MAEA;gBACGX,KAAR,CAAc,0BAAd;;UAEEY,KAAKC,EAAT,EAAa;gBACHA,KAAKD,EAAb;OADF,MAEO,IAAIA,KAAKC,EAAT,EAAa;gBACVD,KAAKC,EAAb;OADK,MAEA,IAAID,OAAOC,EAAX,EAAe;gBACZ,CAAR;OADK,MAEA;gBACGb,KAAR,CAAc,0BAAd;;;;UAIEyB,iBAAJ;UACIC,iBAAJ;;UAEIrB,UAAU,CAAd,EAAiB;mBACJ,CAAX;;UAEEC,UAAU,CAAd,EAAiB;mBACJ,CAAX;;UAEED,SAASA,UAAU,CAAvB,EAA0B;mBACbA,QAAQmB,QAAnB;;UAEElB,SAASA,UAAU,CAAvB,EAA0B;mBACbA,QAAQiB,QAAnB;;;;;UAKE,CAACE,QAAD,IAAa,CAACC,QAAlB,EAA4B;YACtBD,QAAJ,EAAc;iBACLA,WAAW,GAAlB;SADF,MAEO,IAAIC,QAAJ,EAAc;iBACZA,WAAW,GAAlB;;;;UAIAD,aAAa,CAAb,IAAkBC,aAAa,CAAnC,EAAsC;eAC7B,CAAP;;;;UAIEF,WAAWD,QAAf,EAAyB;eAChBE,QAAP;OADF,MAEO,IAAID,WAAWD,QAAf,EAAyB;eACvBG,QAAP;;OADK,MAGA,IAAIF,aAAaD,QAAjB,EAA2B;YAC5BE,YAAYC,QAAhB,EAA0B;iBACjBD,QAAP;SADF,MAEO;iBACEC,QAAP;;OAJG,MAMA;gBACG1B,KAAR,CAAc,0CAAd;;KA7KC;;;iBAAA,yBAiLS2B,QAjLT,EAiLmB;aACfA,SAASC,GAAT,CAAa,UAACC,MAAD,EAASC,CAAT,EAAe;eAC1B;gBACCC,OAAOC,YAAP,CAAoBF,IAAI,EAAxB,CADD;aAEFD,OAAO7C,CAFL;aAGF6C,OAAO5C;SAHZ;OADK,CAAP;KAlLG;gBAAA,wBA0LQgD,YA1LR,EA0LsB;UACrB,CAACA,YAAL,EAAmB;eACV,IAAP;OADF,MAEO;eACE,KAAP;;KA9LC;SAAA,iBAiMCC,OAjMD,EAiMUC,KAjMV,EAiMiB;WACfD,OAAL,GAAeA,OAAf;WACKC,KAAL,GAAaA,KAAb;KAnMG;oBAAA,4BAqMYD,OArMZ,EAqMqBC,KArMrB,EAqM4BC,QArM5B,EAqMsC;aAClC,IAAIA,QAAJ,CAAaF,OAAb,EAAsBC,KAAtB,CAAP;KAtMG;mBAAA,2BAwMWE,SAxMX,EAwMsBC,QAxMtB,EAwMgC;aAC5BD,UAAUT,GAAV,CAAc,eAAO;eACnBW,IAAID,QAAJ,CAAP;OADK,CAAP;;GAzMJ;CADU,EAAZ;;ACAA,IAAME,aAAa,SAAbA,UAAa,CAASC,KAAT,EAAgB;SAC1B;oBACW;eACL,MADK;gBAEJ,UAFI;cAGN;KAJL;WAME;eACI,MADJ;cAEG,iBAFH;eAGI,KAHJ;uBAIY,OAJZ;oCAKuBA,MAAMC,YAAN,CAAmBzD,CAA/C,YALK;uCAM0BwD,MAAMC,YAAN,CAAmB1D,CAAlD;;GAZJ;CADF;AAiBA,IAAM2D,aAAa;QACX;WACG,MADH;YAEI,MAFJ;qBAGa;;CAJrB;AAOA,IAAMC,cAAc;yBACK;aACZ,KADY;iBAER;GAHG;kBAKF;cACJ,UADI;YAEN;;CAPZ;AAUA,IAAMC,aAAa;QACX;YACI,CADJ;gBAGF,kIAHE;yBAIiB,aAJjB;yBAKiB;;CANzB;AASAC,UAAA,GAAiB;wBAAA;wBAAA;wBAAA;;CAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCA;;IACMC;;;gBACQN,KAAZ,EAAmB;;;2GACXA,KADW;;UAEZ9C,KAAL,GAAa;kBACC,KADD;kBAEC,KAFD;uBAGM,KAHN;wBAIO,CAJP;wBAKO,CALP;8BAMa,CANb;wBAOO,EAPP;oBAQG,EARH;mBASE,EATF;eAUF,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf;KAVX;UAYKqD,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,OAAlB;;;;;;gCAEUnB,GAAG;;;;UAET,KAAKW,KAAL,CAAWS,QAAf,EAAyB;YACfA,QADe,GACF,KAAKT,KADH,CACfS,QADe;;eAEhBA,SAAStB,GAAT,CAAa,UAACW,GAAD,EAAMT,CAAN,EAAY;cAC1BqB,eAAJ;kBACQ,OAAKV,KAAL,CAAWjD,IAAnB;iBACO,KAAL;kBACM,CAAC,OAAKG,KAAL,CAAWyD,UAAhB,EAA4B;yBACjB,OAAKC,oBAAL,CAA0BvB,CAA1B,CAAT;eADF,MAEO,IAAI,OAAKnC,KAAL,CAAWyD,UAAf,EAA2B;yBACvB,OAAKE,iBAAL,CAAuBxB,CAAvB,CAAT;;;iBAGC,KAAL;kBACM,CAAC,OAAKnC,KAAL,CAAW4D,UAAhB,EAA4B;yBACjB,OAAKC,oBAAL,CAA0B1B,CAA1B,CAAT;eADF,MAEO,IAAI,OAAKnC,KAAL,CAAW4D,UAAf,EAA2B;yBACvB,OAAKE,iBAAL,CAAuB3B,CAAvB,CAAT;;;iBAGC,UAAL;kBACM,CAAC,OAAKnC,KAAL,CAAW+D,eAAhB,EAAiC;yBACtB,OAAKC,0BAAL,CAAgC7B,CAAhC,CAAT;eADF,MAEO,IAAI,OAAKnC,KAAL,CAAW+D,eAAf,EAAgC;yBAC5B,OAAKE,uBAAL,CAA6B9B,CAA7B,CAAT;;;;;uBAKO+B,oCAAM,UAAN,IAAiB,KAAK/B,CAAtB,EAAyB,IAAIA,CAA7B,GAAT;;;iBAGGqB,MAAP;SA7BK,CAAP;;;;;gCAiCQ3D,MAAM;UACZA,SAAS,KAAb,EAAoB;;aAEbsE,QAAL,CAAc;sBACA/E,MAAMgF,YAAN,CAAmB,KAAKpE,KAAL,CAAWyD,UAA9B;SADd;;OAFF,MAMO,IAAI5D,SAAS,KAAb,EAAoB;gBACjBwE,GAAR,CAAY,UAAZ,EAAwB,KAAKrE,KAAL,CAAW4D,UAAnC;aACKO,QAAL,CAAc;sBACA/E,MAAMgF,YAAN,CAAmB,KAAKpE,KAAL,CAAW4D,UAA9B;SADd;OAFK,MAKA,IAAI/D,SAAS,UAAb,EAAyB;gBACtBwE,GAAR,CAAY,UAAZ,EAAwB,KAAKrE,KAAL,CAAW+D,eAAnC;aACKI,QAAL,CAAc;2BACK/E,MAAMgF,YAAN,CAAmB,KAAKpE,KAAL,CAAW+D,eAA9B;SADnB;;;;;yCAKiB5B,GAAG;UAChBmC,UADgB,GACD,KAAKxB,KADJ,CAChBwB,UADgB;;UAElBC,eAAgB,YAAM;YACpBD,cAAcA,WAAWE,QAAX,CAAoBrC,CAApB,CAAlB,EAA0C,OAAO,KAAP;OADzB,EAAnB;aAGO+B,kCAAM,UAAN,IAAiB,cAAcK,YAA/B,EAA6C,KAAKpC,CAAlD,EAAqD,IAAIA,CAAzD,GAAP;;;;sCAEgBA,GAAG;UACbsC,SADa,GACC,KAAK3B,KADN,CACb2B,SADa;;kBAEPA,UAAUC,GAAtB;UACIC,cAAe,YAAM;YACnB,CAACF,SAAD,IAAc,CAACA,UAAUG,MAAzB,IAAmC,CAACH,UAAUD,QAAV,CAAmBrC,CAAnB,CAAxC,EAA+D;iBACtD,KAAP;;eAEK,IAAP;OAJgB,EAAlB;aAMO+B,kCAAM,UAAN,IAAiB,aAAaS,WAA9B,EAA2C,KAAKxC,CAAhD,EAAmD,IAAIA,CAAvD,GAAP;;;;yCAEmBA,GAAG;UAChBsC,SADgB,GACF,KAAK3B,KADH,CAChB2B,SADgB;;kBAEVA,UAAUC,GAAtB;UACIC,cAAe,YAAM;YACnBF,aAAaA,UAAUD,QAAV,CAAmBrC,CAAnB,CAAjB,EAAwC,OAAO,KAAP;OADxB,EAAlB;aAGO+B,kCAAM,UAAN,IAAiB,aAAaS,WAA9B,EAA2C,KAAKxC,CAAhD,EAAmD,IAAIA,CAAvD,GAAP;;;;4CAEsBA,GAAG;UACnB0C,aADmB,GACD,KAAK/B,KADJ,CACnB+B,aADmB;;UAErBC,qBAAsB,YAAM;YAE5B,CAACD,aAAD,IACA,CAACA,cAAcD,MADf,IAEA,CAACC,cAAcL,QAAd,CAAuBrC,CAAvB,CAHH,EAIE;iBACO,KAAP;;eAEK,IAAP;OARuB,EAAzB;aAWE+B,kCAAM,UAAN,IAAiB,oBAAoBY,kBAArC,EAAyD,KAAK3C,CAA9D,EAAiE,IAAIA,CAArE,GADF;;;;+CAIyBA,GAAG;UACtB0C,aADsB,GACJ,KAAK/B,KADD,CACtB+B,aADsB;;UAExBC,qBAAsB,YAAM;YAC1BD,iBAAiBA,cAAcL,QAAd,CAAuBrC,CAAvB,CAArB,EAAgD,OAAO,KAAP;OADzB,EAAzB;aAIE+B,kCAAM,UAAN,IAAiB,oBAAoBY,kBAArC,EAAyD,KAAK3C,CAA9D,EAAiE,IAAIA,CAArE,GADF;;;;sCAIgBA,GAAG;UACb4C,eADa,GACO,KAAKjC,KADZ,CACbiC,eADa;;;aAGZb,kCAAM,UAAN,IAAiB,KAAK/B,CAAtB,EAAyB,IAAIA,CAA7B,EAAgC,OAAO4C,gBAAgB5C,CAAhB,CAAvC,GAAP;;;;kCAEY6C,SAAS;UACjB,CAAC,KAAKhF,KAAL,CAAWiF,MAAhB,EAAwB;;UAElBC,YAAY,KAAKC,QAAL,CAAcH,OAAd,CAAlB;UACII,wBAAgB,KAAKpF,KAAL,CAAWiF,MAA3B,EAAsCC,SAAtC,CAAJ;aACOE,QAAP;;;;6BAEOJ,SAAS;UACZA,OAAJ,EAAa;eACJ;2BACYA,QAAQxC;SAD3B;OADF,MAIO;eACEyC,OAAOjC,UAAP,CAAkBqC,IAAzB;;;;;+BAGOC,OAAO;UACZC,eAAaD,MAAME,EAAvB;;aAGEtB;eACS,KAAKiB,QAAL,CAAcG,MAAM9C,KAApB,CADT;YAEM+C,KAFN;aAGOD,MAAME,EAHb;mBAIY;QALd;;;;wCASkB;WACbrB,QAAL,CAAc;;OAAd;WAGKsB,WAAL,CAAiB,KAAjB;;;;;6BAGO;UACH,KAAK3C,KAAL,CAAWS,QAAX,IAAuB,KAAKT,KAAL,CAAWS,QAAX,CAAoBqB,MAA/C,EAAuD;eAC9CV;wBAAA,CAAO,QAAP;;eAAsBwB,WAAL;SAAxB;OADF,MAEO;eACExB;;;;SAAP;;;;;EAxKaA,eAAMyB;;ACFzB;AACA,SAASC,KAAT,CAAe9C,KAAf,EAAsB;MAChB,CAACA,MAAM+C,UAAX,EAAuB,OAAO,IAAP;;;WAGdC,cAAT,GAA0B;QACpBC,SAAS,EAAb;QACMC,YAAYC,OAAOC,IAAP,CAAYjB,OAAOhC,WAAnB,CAAlB;SACK,IAAId,IAAI,CAAb,EAAgBA,IAAI6D,UAAUpB,MAA9B,EAAsCzC,GAAtC,EAA2C;UACnCgE,IAAIF,OAAOC,IAAP,CAAYjB,OAAOhC,WAAP,CAAmB+C,UAAU7D,CAAV,CAAnB,CAAZ,CAAV;UACMiE,IAAIH,OAAOI,MAAP,CAAcpB,OAAOhC,WAAP,CAAmB+C,UAAU7D,CAAV,CAAnB,CAAd,CAAV;;sBAEc6D,UAAU7D,CAAV,CAAd;WACK,IAAImE,IAAI,CAAb,EAAgBA,IAAIH,EAAEvB,MAAtB,EAA8B0B,GAA9B,EAAmC;wBACnBH,EAAEG,CAAF,CAAd,UAAuBF,EAAEE,CAAF,CAAvB;;gBAEQ,OAAV;;QAEEC,WAAWC,SAASC,aAAT,CAAuB,OAAvB,CAAf;aACS5G,IAAT,GAAgB,UAAhB;QACI6G,OAAOF,SAASG,cAAT,CAAwBZ,MAAxB,CAAX;aACSa,MAAT,CAAgBF,IAAhB;QACIG,OAAOL,SAASM,aAAT,CAAuB,MAAvB,CAAX;SACKC,WAAL,CAAiBR,QAAjB;;;;MAIES,gBAAJ;GACClE,MAAMN,KAAP,GAAgBwE,UAAU,MAA1B,GAAqCA,UAAU,OAA/C;SACOlE,MAAM+C,UAAN,CAAiB5D,GAAjB,CAAqB,UAACgF,KAAD,EAAQ9E,CAAR,EAAc;;;QACpC8C;eACO+B,OADP;aAEKlE,MAAMN;+BACZyE,MAAMC,UAAN,CAAiBC,IAHhB,EAGuBF,MAAMG,MAAN,CAAa3H,KAAb,CAAmB4H,QAAnB,KAAgC,IAHvD,2BAIDJ,MAAMC,UAAN,CAAiBI,IAJhB,EAIuBL,MAAMG,MAAN,CAAazH,KAAb,CAAmB0H,QAAnB,KAAgC,IAJvD,WAAJ;WAMOnD,sCAAK,WAAU,cAAf,EAA8B,OAAOe,SAArC,EAA6C,KAAK9C,CAAlD,GAAP;GAPK,CAAP;;;ICzBIoF;;;iBACQzE,KAAZ,EAAmB;;;6GACXA,KADW;;UAEZ9C,KAAL,GAAa;oBACG,EADH;wBAEO,CAFP;iBAGA,EAHA;gBAID,EAJC;gBAKD,EALC;0BAMS,CANT;qBAOI,CAPJ;qBAQI,CARJ;qBASIwH,MAAMC,IAAN,CAAW,EAAE7C,QAAQ,GAAV,EAAX,EAA4B,UAAC8C,CAAD,EAAIvF,CAAJ;eAAUA,CAAV;OAA5B,CATJ;6BAUY,EAVZ;6BAWY;KAXzB;;;;;;wCAckB;WACbwF,WAAL;WACKC,sBAAL;WACKC,wBAAL;;;;;;2CAGqBhI,MAAM;;;;aAEpBwG,MAAP,CAAc,KAAKvD,KAAL,CAAWgF,QAAzB,EAAmCC,OAAnC,CAA2C,kBAAO;;eAE5CC,KAAJ,GAAY5I,MAAM6I,aAAN,CAAoBC,OAAIF,KAAxB,CAAZ;eACK7D,QAAL,CAAc;iBAAc;kDACZgE,UAAUL,QAAxB,IAAkCI,MAAlC;WADY;SAAd;OAHF;;;;;;0CASoB;WACf/D,QAAL,CAAc;4BACQ/E,MAAMgJ,iBAAN,CAAwB,KAAKtF,KAAL,CAAWC,YAAnC,CADR;uBAEG,CAFH;uBAGG;OAHjB;WAKKsF,eAAL;;;;;;+CAGyB;;;iBACd,YAAM;mCAENC,GAFM;cAGPtG,WAAW,OAAKhC,KAAL,CAAW8H,QAAX,CAAoBQ,GAApB,EAAyBN,KAA1C;cACQ9C,SAJK,GAIS,OAAKlF,KAAL,CAAW8H,QAAX,CAAoBQ,GAApB,CAJT,CAILpD,SAJK;;;iBAMRqD,cAAL,CAAoB,MAApB,EAA4BvG,QAA5B;cACMwG,cAAc;+BACC,EADD;8BAEA,EAFA;0BAGNF,GAHM;8BAIA,OAAKtI,KAAL,CAAWyI,gBAJX;uBAKP;WALb;mBAOSV,OAAT,CAAiB,UAACW,IAAD,EAAOvG,CAAP,EAAa;6BACiB,OAAKwG,SAAL,CAC3CD,KAAKrJ,CADsC,EAE3CqJ,KAAKpJ,CAFsC,EAG3C,KAH2C,EAI3C4F,SAJ2C,EAK3CsD,YAAYI,gBAL+B,CADjB;gBACpBC,eADoB,cACpBA,eADoB;gBACHC,eADG,cACHA,eADG;;wBAQhBC,iBAAZ,+BACKP,YAAYO,iBADjB,qBAEKF,eAFL;wBAIYD,gBAAZ,gBACKJ,YAAYI,gBADjB,EAEKE,eAFL;WAZF;iBAiBK3E,QAAL,CAAc;mBAAc;oDACZgE,UAAUa,QAAxB,IAAkCR,WAAlC;aADY;WAAd;iBAGKS,mBAAL;;;;aAhCG,IAAIX,GAAT,IAAgB,OAAKtI,KAAL,CAAW8H,QAA3B,EAAqC;gBAA5BQ,GAA4B;;eAkChCnE,QAAL,CAAc;iCACW,OAAK+E,oBAAL,EADX;iCAEW,OAAKC,oBAAL;SAFzB;OApCF;;;;;;2CA2CqB;UACfC,MAAM,KAAKpJ,KAAL,CAAWgJ,QAAX,CACT/G,GADS,CACL,eAAO;eACHW,IAAImG,iBAAX;OAFQ,EAITM,IAJS,EAAZ;aAKOD,GAAP;;;;;;2CAGqB;UACjBE,UAAU,EAAd;WACKtJ,KAAL,CAAWgJ,QAAX,CAAoBjB,OAApB,CAA4B,eAAO;+BAClBuB,OAAf,EAA2B1G,IAAIgG,gBAA/B;OADF;aAGOU,OAAP;;;;kCAEY;;;UACRC,OAAO,IAAX;;UAEIC,QACF9J,SAAS,KAAKoD,KAAL,CAAWC,YAAX,CAAwB1D,CAAjC,IAAsCK,SAAS,KAAKoD,KAAL,CAAWC,YAAX,CAAwBzD,CAAjC,CADxC;UAEI,CAACkK,KAAL,EAAY;gBACFnJ,KAAR,CAAc,gBAAd;;;WAGG8D,QAAL,CAAc;uBACGqD,MAAMC,IAAN,CAAW,EAAE7C,QAAQ4E,KAAV,EAAX,EAA8B,UAAC9B,CAAD,EAAIvF,CAAJ;iBAAUA,CAAV;SAA9B;OADjB;iBAGW,YAAM;eACVgC,QAAL,CAAc;8BACQ/E,MAAMgJ,iBAAN,CAAwB,OAAKtF,KAAL,CAAWC,YAAnC;SADtB;eAGKsF,eAAL;OAJF;;;;;;+BAQShJ,GAAGC,GAAGO,MAAM;UACjBA,SAAS,MAAb,EAAqB;YACfJ,QAAQK,KAAKC,GAAL,CAAS,KAAKC,KAAL,CAAWC,aAAX,GAA2BZ,CAApC,CAAZ;YACIM,QAAQG,KAAKC,GAAL,CAAS,KAAKC,KAAL,CAAWE,aAAX,GAA2BZ,CAApC,CAAZ;eACO;iBACEG,KADF;iBAEEE;SAFT;OAHF,MAOO,IAAIE,SAAS,KAAb,EAAoB;YACrBJ,SAAQK,KAAKC,GAAL,CAAS,KAAKC,KAAL,CAAWG,YAAX,GAA0Bd,CAAnC,CAAZ;YACIM,SAAQG,KAAKC,GAAL,CAAS,KAAKC,KAAL,CAAWI,YAAX,GAA0Bd,CAAnC,CAAZ;eACO;iBACEG,MADF;iBAEEE;SAFT;OAHK,MAOA;gBACGU,KAAR,CAAc,mCAAd;;;;;;;qCAIakB,SAASC,SAAS;UAC7BL,OAAOrB,KAAK2B,KAAL,CAAWF,QAAQb,KAAR,GAAgB,IAAhB,GAAuBc,OAAlC,CAAX;UACIJ,OAAOtB,KAAK2B,KAAL,CAAWF,QAAQZ,KAAR,GAAgB,IAAhB,GAAuBa,OAAlC,CAAX;aACO,EAAEL,UAAF,EAAQC,UAAR,EAAP;;;;;;sCAGgB;;WAEX+C,QAAL,CAAc;sBACEzE,SAAS,KAAKoD,KAAL,CAAWC,YAAX,CAAwB1D,CAAjC;OADhB;;;;8BAIQA,GAAGC,GAAGO,MAAMqF,WAAWuE,UAAU;;UAErCZ,kBAAkB,EAAtB;UACIC,kBAAkB,EAAtB;UACIY,QAAQrK,CAAZ;UACIsK,QAAQrK,CAAZ;UACIsK,oBAAJ;UACIC,iBAAJ;;UAEIhK,SAAS,KAAb,EAAoB;sBACJ,KAAKG,KAAL,CAAW8J,kBAAzB;;;cAGM,KAAKC,UAAL,CAAgBL,KAAhB,EAAuBC,KAAvB,EAA8B,MAA9B,EAAsCD,KAA9C;cACQ,KAAKK,UAAL,CAAgBL,KAAhB,EAAuBC,KAAvB,EAA8B,MAA9B,EAAsCA,KAA9C;;UAEI,KAAK3J,KAAL,CAAWC,aAAX,KAA6B,CAA7B,IAAkC,KAAKD,KAAL,CAAWE,aAAX,KAA6B,CAAnE,EAAsE;gBAC5DwJ,QAAQ,CAAhB;gBACQC,QAAQ,CAAhB;YACM/G,MAAMxD,MAAM4K,gBAAN,CAAuBJ,WAAvB,EAAoC1E,SAApC,EAA+C9F,MAAM6K,KAArD,CAAZ;wBACgBC,IAAhB,CAAqBtH,GAArB;wBACgBA,IAAIL,OAApB,IAA+BK,GAA/B;;;aAGK8G,SAASC,KAAhB,EAAuB;;;YAGjB,KAAK3J,KAAL,CAAWE,aAAX,GAA2BZ,CAA/B,EAAkC;wBAClBsK,cAAc,KAAK5J,KAAL,CAAWmK,YAAvC;cACMvH,OAAMxD,MAAM4K,gBAAN,CAAuBJ,WAAvB,EAAoC1E,SAApC,EAA+C9F,MAAM6K,KAArD,CAAZ;0BACgBC,IAAhB,CAAqBtH,IAArB;0BACgBA,KAAIL,OAApB,IAA+BK,IAA/B;SAJF,MAKO,IAAI,KAAK5C,KAAL,CAAWE,aAAX,GAA2BZ,CAA/B,EAAkC;wBACzBsK,cAAc,KAAK5J,KAAL,CAAWmK,YAAvC;cACMvH,QAAMxD,MAAM4K,gBAAN,CAAuBJ,WAAvB,EAAoC1E,SAApC,EAA+C9F,MAAM6K,KAArD,CAAZ;0BACgBC,IAAhB,CAAqBtH,KAArB;0BACgBA,MAAIL,OAApB,IAA+BK,KAA/B;;YAEE,KAAK5C,KAAL,CAAWC,aAAX,GAA2BZ,CAA/B,EAAkC;wBAClBuK,cAAc,CAA5B;cACMhH,QAAMxD,MAAM4K,gBAAN,CAAuBJ,WAAvB,EAAoC1E,SAApC,EAA+C9F,MAAM6K,KAArD,CAAZ;0BACgBC,IAAhB,CAAqBtH,KAArB;0BACgBA,MAAIL,OAApB,IAA+BK,KAA/B;SAJF,MAKO,IAAI,KAAK5C,KAAL,CAAWC,aAAX,GAA2BZ,CAA/B,EAAkC;wBACzBuK,cAAc,CAA5B;cACMhH,QAAMxD,MAAM4K,gBAAN,CAAuBJ,WAAvB,EAAoC1E,SAApC,EAA+C9F,MAAM6K,KAArD,CAAZ;0BACgBC,IAAhB,CAAqBtH,KAArB;0BACgBA,MAAIL,OAApB,IAA+BK,KAA/B;;gBAEM8G,QAAQ,CAAhB;gBACQC,QAAQ,CAAhB;;;iBAGSA,QAASE,WAAWF,KAApB,GAA8BE,WAAWH,KAApD;;WAEK,IAAIvH,IAAI,CAAb,EAAgBA,IAAI0H,QAApB,EAA8B1H,GAA9B,EAAmC;YAC7BwH,KAAJ,EAAW;cACL,KAAK3J,KAAL,CAAWE,aAAX,GAA2BZ,CAA/B,EAAkC;0BAClBsK,cAAc,KAAK5J,KAAL,CAAWmK,YAAvC;gBACMvH,QAAMxD,MAAM4K,gBAAN,CACVJ,WADU,EAEV1E,SAFU,EAGV9F,MAAM6K,KAHI,CAAZ;4BAKgBC,IAAhB,CAAqBtH,KAArB;4BACgBA,MAAIL,OAApB,IAA+BK,KAA/B;WARF,MASO,IAAI,KAAK5C,KAAL,CAAWE,aAAX,GAA2BZ,CAA/B,EAAkC;0BACzBsK,cAAc,KAAK5J,KAAL,CAAWmK,YAAvC;gBACMvH,QAAMxD,MAAM4K,gBAAN,CACVJ,WADU,EAEV1E,SAFU,EAGV9F,MAAM6K,KAHI,CAAZ;4BAKgBC,IAAhB,CAAqBtH,KAArB;4BACgBA,MAAIL,OAApB,IAA+BK,KAA/B;;SAlBJ,MAoBO,IAAI8G,KAAJ,EAAW;cACZ,KAAK1J,KAAL,CAAWC,aAAX,GAA2BZ,CAA/B,EAAkC;0BAClBuK,cAAc,CAA5B;gBACMhH,QAAMxD,MAAM4K,gBAAN,CACVJ,WADU,EAEV1E,SAFU,EAGV9F,MAAM6K,KAHI,CAAZ;4BAKgBC,IAAhB,CAAqBtH,KAArB;4BACgBA,MAAIL,OAApB,IAA+BK,KAA/B;WARF,MASO,IAAI,KAAK5C,KAAL,CAAWC,aAAX,GAA2BZ,CAA/B,EAAkC;0BACzBuK,cAAc,CAA5B;gBACMhH,QAAMxD,MAAM4K,gBAAN,CACVJ,WADU,EAEV1E,SAFU,EAGV9F,MAAM6K,KAHI,CAAZ;4BAKgBC,IAAhB,CAAqBtH,KAArB;4BACgBA,MAAIL,OAApB,IAA+BK,KAA/B;;;;UAIF/C,SAAS,KAAb,EAAoB;aACbsE,QAAL,CAAc;yBACG9E,CADH;yBAEGC,CAFH;8BAGQsK;SAHtB;;aAMK;wCAAA;;OAAP;;;;oCAKc;cACNvF,GAAR,CAAY,IAAZ,EAAkBxB,OAAWK,UAAX,CAAsBkH,IAAxC;UACIxH,mBACCC,OAAWA,UAAX,CAAsB,KAAKC,KAA3B,EAAkCuH,cADnC,EAECxH,OAAWK,UAAX,CAAsBkH,IAFvB,CAAJ;aAIOxH,GAAP;;;;;;;mCAIa/C,MAAMuJ,KAAK/J,GAAGC,GAAG;UAC1BiK,OAAO,IAAX;;UAEI1J,SAAS,MAAb,EAAqB;mBACR,YAAW;cAChByK,YAAY,EAAhB;cACIlB,IAAIxE,MAAJ,GAAa,CAAjB,EAAoB;gBACdmD,OAAJ,CAAY,gBAAQ;kBACdX,SAAShI,MAAMmL,gBAAN,CAAuB7B,KAAKrJ,CAA5B,EAA+BqJ,KAAKpJ,CAApC,CAAb;kBACI4C,SAAS;wBACHkF,MADG;4BAEC;wBACJ,MADI;wBAEJ;;eAJV;wBAOU8C,IAAV,CAAehI,MAAf;aATF;;eAYGiC,QAAL,CAAc;mBAAc;wDACRgE,UAAUqC,YAA5B,IAA0CF,SAA1C;aADY;WAAd;SAfF;OADF,MAoBO,IAAIzK,SAAS,QAAb,EAAuB;YACxBuH,SAAShI,MAAMmL,gBAAN,CAAuBlL,CAAvB,EAA0BC,CAA1B,CAAb;YACI4C,SAAS;kBACHkF,MADG;sBAEC;kBACJ,MADI;kBAEJ;;SAJV;eAOOlF,MAAP;;;;;6BAGK;;;aAELgC;;UAAM,WAAU,iBAAhB,EAAkC,OAAO,KAAKuG,aAAL,EAAzC;;;YACO,WAAU,OAAf,EAAuB,OAAO5H,OAAWA,UAAX,CAAsB,KAAKC,KAA3B,EAAkC4H,KAAhE;aAAA;eAEQ1K,KAAL,CAAW8H,QAAX,CAAoB7F,GAApB,CAAwB,UAAC0I,QAAD,EAAWxI,CAAX,EAAiB;mBAEtC+B,6BAAC,KAAD;mBACO/B,CADP;qBAESwI,WAAWA,SAASC,SAApB,GAAgC,IAFzC;0BAGc,OAAK5K,KAAL,CAAWwK,YAAX,CAAwBrI,CAAxB;cAJhB;WADD,CAFH;aAAA;uCAWG,IAAD;sBACY,KAAKnC,KAAL,CAAW6K,aADvB;6BAGI,CAAC,KAAK7K,KAAL,CAAW8K,qBAAZ,GACI,IADJ,GAEI,KAAK9K,KAAL,CAAW8K,qBALnB;6BAQI,CAAC,KAAK9K,KAAL,CAAW+K,qBAAZ,GACI,IADJ,GAEI,KAAK/K,KAAL,CAAW+K,qBAVnB;kBAYO;YAvBT;;;OAFJ;;;;EAvTgBpF;;AAuVpB4B,MAAMyD,SAAN,GAAkB;YACNC,UAAUC,MADJ;gBAEFD,UAAUC;CAF1B;;;;"}